// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: keystone.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityState int32

const (
	EntityState_Invalid  EntityState = 0
	EntityState_Active   EntityState = 1
	EntityState_Offline  EntityState = 2
	EntityState_Corrupt  EntityState = 3
	EntityState_Archived EntityState = 4
	EntityState_Removed  EntityState = 5
)

// Enum value maps for EntityState.
var (
	EntityState_name = map[int32]string{
		0: "Invalid",
		1: "Active",
		2: "Offline",
		3: "Corrupt",
		4: "Archived",
		5: "Removed",
	}
	EntityState_value = map[string]int32{
		"Invalid":  0,
		"Active":   1,
		"Offline":  2,
		"Corrupt":  3,
		"Archived": 4,
		"Removed":  5,
	}
)

func (x EntityState) Enum() *EntityState {
	p := new(EntityState)
	*p = x
	return p
}

func (x EntityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityState) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[0].Descriptor()
}

func (EntityState) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[0]
}

func (x EntityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityState.Descriptor instead.
func (EntityState) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{0}
}

type LogLevel int32

const (
	LogLevel_Debug    LogLevel = 0
	LogLevel_Info     LogLevel = 1
	LogLevel_Notice   LogLevel = 2
	LogLevel_Warn     LogLevel = 3
	LogLevel_Error    LogLevel = 4
	LogLevel_Critical LogLevel = 5
	LogLevel_Alert    LogLevel = 6
	LogLevel_Fatal    LogLevel = 7
	LogLevel_Audit    LogLevel = 8 // Audit Trail
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "Debug",
		1: "Info",
		2: "Notice",
		3: "Warn",
		4: "Error",
		5: "Critical",
		6: "Alert",
		7: "Fatal",
		8: "Audit",
	}
	LogLevel_value = map[string]int32{
		"Debug":    0,
		"Info":     1,
		"Notice":   2,
		"Warn":     3,
		"Error":    4,
		"Critical": 5,
		"Alert":    6,
		"Fatal":    7,
		"Audit":    8,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[1].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[1]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{1}
}

type ObjectType int32

const (
	ObjectType_None     ObjectType = 0
	ObjectType_Standard ObjectType = 1 // Frequent Access / Short Lived
	ObjectType_NearLine ObjectType = 2 // 30 Day Minimum
	ObjectType_ColdLine ObjectType = 3 // 90 Day Minimum
	ObjectType_Archive  ObjectType = 4 // 1 Year Minimum
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0: "None",
		1: "Standard",
		2: "NearLine",
		3: "ColdLine",
		4: "Archive",
	}
	ObjectType_value = map[string]int32{
		"None":     0,
		"Standard": 1,
		"NearLine": 2,
		"ColdLine": 3,
		"Archive":  4,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[2].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[2]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{2}
}

type Operator int32

const (
	Operator_Equal              Operator = 0
	Operator_NotEqual           Operator = 1
	Operator_GreaterThan        Operator = 2
	Operator_GreaterThanOrEqual Operator = 3
	Operator_LessThan           Operator = 4
	Operator_LessThanOrEqual    Operator = 5
	Operator_Contains           Operator = 6
	Operator_NotContains        Operator = 7
	Operator_StartsWith         Operator = 8
	Operator_EndsWith           Operator = 9
	Operator_In                 Operator = 10
	Operator_NotIn              Operator = 11
	Operator_Between            Operator = 12
	Operator_IsNull             Operator = 13
	Operator_IsNotNull          Operator = 14
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "Equal",
		1:  "NotEqual",
		2:  "GreaterThan",
		3:  "GreaterThanOrEqual",
		4:  "LessThan",
		5:  "LessThanOrEqual",
		6:  "Contains",
		7:  "NotContains",
		8:  "StartsWith",
		9:  "EndsWith",
		10: "In",
		11: "NotIn",
		12: "Between",
		13: "IsNull",
		14: "IsNotNull",
	}
	Operator_value = map[string]int32{
		"Equal":              0,
		"NotEqual":           1,
		"GreaterThan":        2,
		"GreaterThanOrEqual": 3,
		"LessThan":           4,
		"LessThanOrEqual":    5,
		"Contains":           6,
		"NotContains":        7,
		"StartsWith":         8,
		"EndsWith":           9,
		"In":                 10,
		"NotIn":              11,
		"Between":            12,
		"IsNull":             13,
		"IsNotNull":          14,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[3].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[3]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{3}
}

type Schema_Option int32

const (
	Schema_None                 Schema_Option = 0
	Schema_StoreMutations       Schema_Option = 1
	Schema_Immutable            Schema_Option = 2
	Schema_StoreAuditTrail      Schema_Option = 3
	Schema_StoreMutationSummary Schema_Option = 4
	Schema_HashedID             Schema_Option = 5 // ID is a hash of an external ID
)

// Enum value maps for Schema_Option.
var (
	Schema_Option_name = map[int32]string{
		0: "None",
		1: "StoreMutations",
		2: "Immutable",
		3: "StoreAuditTrail",
		4: "StoreMutationSummary",
		5: "HashedID",
	}
	Schema_Option_value = map[string]int32{
		"None":                 0,
		"StoreMutations":       1,
		"Immutable":            2,
		"StoreAuditTrail":      3,
		"StoreMutationSummary": 4,
		"HashedID":             5,
	}
)

func (x Schema_Option) Enum() *Schema_Option {
	p := new(Schema_Option)
	*p = x
	return p
}

func (x Schema_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[4].Descriptor()
}

func (Schema_Option) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[4]
}

func (x Schema_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Option.Descriptor instead.
func (Schema_Option) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4, 0}
}

type Schema_Type int32

const (
	Schema_Entity     Schema_Type = 0
	Schema_TimeSeries Schema_Type = 1
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0: "Entity",
		1: "TimeSeries",
	}
	Schema_Type_value = map[string]int32{
		"Entity":     0,
		"TimeSeries": 1,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[5].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[5]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4, 1}
}

type Property_Type int32

const (
	Property_Text       Property_Type = 0
	Property_Number     Property_Type = 1
	Property_Boolean    Property_Type = 2
	Property_Float      Property_Type = 3
	Property_Time       Property_Type = 4
	Property_Amount     Property_Type = 5
	Property_KeyValue   Property_Type = 6  // Map of string:string values
	Property_Strings    Property_Type = 7  // List of string values
	Property_Ints       Property_Type = 10 // List of int values
	Property_SecureText Property_Type = 8
	Property_VerifyText Property_Type = 9  // Data can be matched, but not read e.g. Password
	Property_IntSet     Property_Type = 11 // Unique list of ints
	Property_StringSet  Property_Type = 12 // Unique list of strings
	Property_Bytes      Property_Type = 14 // JSON data for unhandled types
	Property_Unmanaged  Property_Type = 15 // All data types written will be applied, replacing any existing values | Recommended not to use unless aware of the implications
	Property_Mixed      Property_Type = 16 //  keystone mixed type (text, number, bool, float, time, bytes)
	Property_KeyMixed   Property_Type = 17 // Keyed data type, where the key is a string and the value is a keystone mixed type (text, number, bool, float, time, bytes)
)

// Enum value maps for Property_Type.
var (
	Property_Type_name = map[int32]string{
		0:  "Text",
		1:  "Number",
		2:  "Boolean",
		3:  "Float",
		4:  "Time",
		5:  "Amount",
		6:  "KeyValue",
		7:  "Strings",
		10: "Ints",
		8:  "SecureText",
		9:  "VerifyText",
		11: "IntSet",
		12: "StringSet",
		14: "Bytes",
		15: "Unmanaged",
		16: "Mixed",
		17: "KeyMixed",
	}
	Property_Type_value = map[string]int32{
		"Text":       0,
		"Number":     1,
		"Boolean":    2,
		"Float":      3,
		"Time":       4,
		"Amount":     5,
		"KeyValue":   6,
		"Strings":    7,
		"Ints":       10,
		"SecureText": 8,
		"VerifyText": 9,
		"IntSet":     11,
		"StringSet":  12,
		"Bytes":      14,
		"Unmanaged":  15,
		"Mixed":      16,
		"KeyMixed":   17,
	}
)

func (x Property_Type) Enum() *Property_Type {
	p := new(Property_Type)
	*p = x
	return p
}

func (x Property_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[6].Descriptor()
}

func (Property_Type) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[6]
}

func (x Property_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_Type.Descriptor instead.
func (Property_Type) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{5, 0}
}

type Property_ExtendedType int32

const (
	Property_ExtendedNone Property_ExtendedType = 0
	Property_UserInput    Property_ExtendedType = 1
	Property_Secure       Property_ExtendedType = 2
	Property_Personal     Property_ExtendedType = 3 // Misc Personal Data (Not covered by specific types)
	Property_ExternalID   Property_ExtendedType = 4 // ID for another entity
	Property_PersonName   Property_ExtendedType = 10
	Property_Email        Property_ExtendedType = 11
	Property_Phone        Property_ExtendedType = 12
	Property_IP           Property_ExtendedType = 14
	Property_Country      Property_ExtendedType = 15
	Property_URL          Property_ExtendedType = 16
)

// Enum value maps for Property_ExtendedType.
var (
	Property_ExtendedType_name = map[int32]string{
		0:  "ExtendedNone",
		1:  "UserInput",
		2:  "Secure",
		3:  "Personal",
		4:  "ExternalID",
		10: "PersonName",
		11: "Email",
		12: "Phone",
		14: "IP",
		15: "Country",
		16: "URL",
	}
	Property_ExtendedType_value = map[string]int32{
		"ExtendedNone": 0,
		"UserInput":    1,
		"Secure":       2,
		"Personal":     3,
		"ExternalID":   4,
		"PersonName":   10,
		"Email":        11,
		"Phone":        12,
		"IP":           14,
		"Country":      15,
		"URL":          16,
	}
)

func (x Property_ExtendedType) Enum() *Property_ExtendedType {
	p := new(Property_ExtendedType)
	*p = x
	return p
}

func (x Property_ExtendedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_ExtendedType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[7].Descriptor()
}

func (Property_ExtendedType) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[7]
}

func (x Property_ExtendedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_ExtendedType.Descriptor instead.
func (Property_ExtendedType) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{5, 1}
}

type Property_Option int32

const (
	Property_None          Property_Option = 0
	Property_Unique        Property_Option = 1 // Unique across all entities of this type
	Property_Indexed       Property_Option = 2 // Query e.g. SQL
	Property_Immutable     Property_Option = 3 // Write once
	Property_Required      Property_Option = 4 // Must be set on creation
	Property_ReverseLookup Property_Option = 5 // Store a direct lookup to the entity
	Property_Searchable    Property_Option = 6 // Full text search
	// Reporting
	Property_Metric       Property_Option = 7
	Property_MetricFilter Property_Option = 8
	// Information
	Property_Deprecated Property_Option = 9
	Property_Primary    Property_Option = 10 // Primary key for the entity
)

// Enum value maps for Property_Option.
var (
	Property_Option_name = map[int32]string{
		0:  "None",
		1:  "Unique",
		2:  "Indexed",
		3:  "Immutable",
		4:  "Required",
		5:  "ReverseLookup",
		6:  "Searchable",
		7:  "Metric",
		8:  "MetricFilter",
		9:  "Deprecated",
		10: "Primary",
	}
	Property_Option_value = map[string]int32{
		"None":          0,
		"Unique":        1,
		"Indexed":       2,
		"Immutable":     3,
		"Required":      4,
		"ReverseLookup": 5,
		"Searchable":    6,
		"Metric":        7,
		"MetricFilter":  8,
		"Deprecated":    9,
		"Primary":       10,
	}
)

func (x Property_Option) Enum() *Property_Option {
	p := new(Property_Option)
	*p = x
	return p
}

func (x Property_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[8].Descriptor()
}

func (Property_Option) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[8]
}

func (x Property_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_Option.Descriptor instead.
func (Property_Option) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{5, 2}
}

type MutateRequest_MutateOption int32

const (
	MutateRequest_NoOption         MutateRequest_MutateOption = 0
	MutateRequest_BackgroundIndex  MutateRequest_MutateOption = 1 // Will not wait for indexing to complete before returning
	MutateRequest_OnConflictIgnore MutateRequest_MutateOption = 2 // On Conflicting Unique IDs, ignore the mutation
)

// Enum value maps for MutateRequest_MutateOption.
var (
	MutateRequest_MutateOption_name = map[int32]string{
		0: "NoOption",
		1: "BackgroundIndex",
		2: "OnConflictIgnore",
	}
	MutateRequest_MutateOption_value = map[string]int32{
		"NoOption":         0,
		"BackgroundIndex":  1,
		"OnConflictIgnore": 2,
	}
)

func (x MutateRequest_MutateOption) Enum() *MutateRequest_MutateOption {
	p := new(MutateRequest_MutateOption)
	*p = x
	return p
}

func (x MutateRequest_MutateOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutateRequest_MutateOption) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[9].Descriptor()
}

func (MutateRequest_MutateOption) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[9]
}

func (x MutateRequest_MutateOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MutateRequest_MutateOption.Descriptor instead.
func (MutateRequest_MutateOption) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{31, 0}
}

type PropertyAggregation_AggregationType int32

const (
	PropertyAggregation_None    PropertyAggregation_AggregationType = 0
	PropertyAggregation_Sum     PropertyAggregation_AggregationType = 1
	PropertyAggregation_Average PropertyAggregation_AggregationType = 2
	PropertyAggregation_Count   PropertyAggregation_AggregationType = 3
	PropertyAggregation_Min     PropertyAggregation_AggregationType = 4
	PropertyAggregation_Max     PropertyAggregation_AggregationType = 5
)

// Enum value maps for PropertyAggregation_AggregationType.
var (
	PropertyAggregation_AggregationType_name = map[int32]string{
		0: "None",
		1: "Sum",
		2: "Average",
		3: "Count",
		4: "Min",
		5: "Max",
	}
	PropertyAggregation_AggregationType_value = map[string]int32{
		"None":    0,
		"Sum":     1,
		"Average": 2,
		"Count":   3,
		"Min":     4,
		"Max":     5,
	}
)

func (x PropertyAggregation_AggregationType) Enum() *PropertyAggregation_AggregationType {
	p := new(PropertyAggregation_AggregationType)
	*p = x
	return p
}

func (x PropertyAggregation_AggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyAggregation_AggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[10].Descriptor()
}

func (PropertyAggregation_AggregationType) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[10]
}

func (x PropertyAggregation_AggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyAggregation_AggregationType.Descriptor instead.
func (PropertyAggregation_AggregationType) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{64, 0}
}

type ExtendedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors      []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Suggestions []string `protobuf:"bytes,2,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *ExtendedResponse) Reset() {
	*x = ExtendedResponse{}
	mi := &file_keystone_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedResponse) ProtoMessage() {}

func (x *ExtendedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedResponse.ProtoReflect.Descriptor instead.
func (*ExtendedResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{0}
}

func (x *ExtendedResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ExtendedResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type VendorApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *VendorApp) Reset() {
	*x = VendorApp{}
	mi := &file_keystone_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorApp) ProtoMessage() {}

func (x *VendorApp) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorApp.ProtoReflect.Descriptor instead.
func (*VendorApp) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{1}
}

func (x *VendorApp) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *VendorApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Token           string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	WorkspaceId     string     `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	User            *User      `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	TraceId         string     `protobuf:"bytes,5,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SharedViewToken string     `protobuf:"bytes,6,opt,name=shared_view_token,json=sharedViewToken,proto3" json:"shared_view_token,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	mi := &file_keystone_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{2}
}

func (x *Authorization) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Authorization) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Authorization) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Authorization) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Authorization) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Authorization) GetSharedViewToken() string {
	if x != nil {
		return x.SharedViewToken
	}
	return ""
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode    int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	mi := &file_keystone_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{3}
}

func (x *GenericResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenericResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GenericResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source      *VendorApp             `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsChild     bool                   `protobuf:"varint,4,opt,name=is_child,json=isChild,proto3" json:"is_child,omitempty"` // Child entity, saving of these must be given a parent
	Type        string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                       // Language Type
	Created     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Description string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Properties  []*Property            `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty"`
	Options     []Schema_Option        `protobuf:"varint,9,rep,packed,name=options,proto3,enum=kubex.keystone.Schema_Option" json:"options,omitempty"`
	Singular    string                 `protobuf:"bytes,10,opt,name=singular,proto3" json:"singular,omitempty"`
	Plural      string                 `protobuf:"bytes,11,opt,name=plural,proto3" json:"plural,omitempty"`
	KsType      Schema_Type            `protobuf:"varint,12,opt,name=ks_type,json=ksType,proto3,enum=kubex.keystone.Schema_Type" json:"ks_type,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_keystone_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4}
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schema) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetIsChild() bool {
	if x != nil {
		return x.IsChild
	}
	return false
}

func (x *Schema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Schema) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema) GetOptions() []Schema_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Schema) GetSingular() string {
	if x != nil {
		return x.Singular
	}
	return ""
}

func (x *Schema) GetPlural() string {
	if x != nil {
		return x.Plural
	}
	return ""
}

func (x *Schema) GetKsType() Schema_Type {
	if x != nil {
		return x.KsType
	}
	return Schema_Entity
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType     Property_Type         `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=kubex.keystone.Property_Type" json:"data_type,omitempty"`
	ExtendedType Property_ExtendedType `protobuf:"varint,3,opt,name=extended_type,json=extendedType,proto3,enum=kubex.keystone.Property_ExtendedType" json:"extended_type,omitempty"`
	Options      []Property_Option     `protobuf:"varint,5,rep,packed,name=options,proto3,enum=kubex.keystone.Property_Option" json:"options,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_keystone_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{5}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetDataType() Property_Type {
	if x != nil {
		return x.DataType
	}
	return Property_Text
}

func (x *Property) GetExtendedType() Property_ExtendedType {
	if x != nil {
		return x.ExtendedType
	}
	return Property_ExtendedNone
}

func (x *Property) GetOptions() []Property_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Key    string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_keystone_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{6}
}

func (x *Key) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Int         int64                  `protobuf:"varint,3,opt,name=int,proto3" json:"int,omitempty"`
	Bool        bool                   `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty"`
	Float       float64                `protobuf:"fixed64,5,opt,name=float,proto3" json:"float,omitempty"`
	Time        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	SecureText  string                 `protobuf:"bytes,7,opt,name=secure_text,json=secureText,proto3" json:"secure_text,omitempty"`
	Raw         []byte                 `protobuf:"bytes,8,opt,name=raw,proto3" json:"raw,omitempty"`
	Array       *RepeatedValue         `protobuf:"bytes,9,opt,name=array,proto3" json:"array,omitempty"`
	ArrayAppend *RepeatedValue         `protobuf:"bytes,10,opt,name=array_append,json=arrayAppend,proto3" json:"array_append,omitempty"`
	ArrayReduce *RepeatedValue         `protobuf:"bytes,11,opt,name=array_reduce,json=arrayReduce,proto3" json:"array_reduce,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_keystone_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{7}
}

func (x *Value) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Value) GetInt() int64 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *Value) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Value) GetFloat() float64 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *Value) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Value) GetSecureText() string {
	if x != nil {
		return x.SecureText
	}
	return ""
}

func (x *Value) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Value) GetArray() *RepeatedValue {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *Value) GetArrayAppend() *RepeatedValue {
	if x != nil {
		return x.ArrayAppend
	}
	return nil
}

func (x *Value) GetArrayReduce() *RepeatedValue {
	if x != nil {
		return x.ArrayReduce
	}
	return nil
}

type RepeatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValue map[string][]byte `protobuf:"bytes,1,rep,name=key_value,json=keyValue,proto3" json:"key_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Strings  []string          `protobuf:"bytes,2,rep,name=strings,proto3" json:"strings,omitempty"`
	Ints     []int64           `protobuf:"varint,3,rep,packed,name=ints,proto3" json:"ints,omitempty"`
	Mixed    map[string]*Value `protobuf:"bytes,4,rep,name=mixed,proto3" json:"mixed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RepeatedValue) Reset() {
	*x = RepeatedValue{}
	mi := &file_keystone_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedValue) ProtoMessage() {}

func (x *RepeatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedValue.ProtoReflect.Descriptor instead.
func (*RepeatedValue) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{8}
}

func (x *RepeatedValue) GetKeyValue() map[string][]byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *RepeatedValue) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *RepeatedValue) GetInts() []int64 {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *RepeatedValue) GetMixed() map[string]*Value {
	if x != nil {
		return x.Mixed
	}
	return nil
}

type PiiTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization   *Authorization         `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	AutoExpire      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=auto_expire,json=autoExpire,proto3" json:"auto_expire,omitempty"`
	Country         string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`                                         // GB
	Regulation      string                 `protobuf:"bytes,4,opt,name=regulation,proto3" json:"regulation,omitempty"`                                   // GDPR // UPPER CASE
	Reference       string                 `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`                                     // For external parties to reference the token
	ReuseReferenced bool                   `protobuf:"varint,6,opt,name=reuse_referenced,json=reuseReferenced,proto3" json:"reuse_referenced,omitempty"` // Reuse the token if it has not expired
}

func (x *PiiTokenRequest) Reset() {
	*x = PiiTokenRequest{}
	mi := &file_keystone_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PiiTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiiTokenRequest) ProtoMessage() {}

func (x *PiiTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiiTokenRequest.ProtoReflect.Descriptor instead.
func (*PiiTokenRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{9}
}

func (x *PiiTokenRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *PiiTokenRequest) GetAutoExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoExpire
	}
	return nil
}

func (x *PiiTokenRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PiiTokenRequest) GetRegulation() string {
	if x != nil {
		return x.Regulation
	}
	return ""
}

func (x *PiiTokenRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PiiTokenRequest) GetReuseReferenced() bool {
	if x != nil {
		return x.ReuseReferenced
	}
	return false
}

type PiiTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PiiTokenResponse) Reset() {
	*x = PiiTokenResponse{}
	mi := &file_keystone_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PiiTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiiTokenResponse) ProtoMessage() {}

func (x *PiiTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiiTokenResponse.ProtoReflect.Descriptor instead.
func (*PiiTokenResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{10}
}

func (x *PiiTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PiiAnonymizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Token         string         `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Rollback      bool           `protobuf:"varint,3,opt,name=rollback,proto3" json:"rollback,omitempty"` // Rollback the anonymization (Only available within the recovery window)
}

func (x *PiiAnonymizeRequest) Reset() {
	*x = PiiAnonymizeRequest{}
	mi := &file_keystone_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PiiAnonymizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiiAnonymizeRequest) ProtoMessage() {}

func (x *PiiAnonymizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiiAnonymizeRequest.ProtoReflect.Descriptor instead.
func (*PiiAnonymizeRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{11}
}

func (x *PiiAnonymizeRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *PiiAnonymizeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PiiAnonymizeRequest) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

type PiiAnonymizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RecoveryUntil *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=recovery_until,json=recoveryUntil,proto3" json:"recovery_until,omitempty"`
}

func (x *PiiAnonymizeResponse) Reset() {
	*x = PiiAnonymizeResponse{}
	mi := &file_keystone_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PiiAnonymizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiiAnonymizeResponse) ProtoMessage() {}

func (x *PiiAnonymizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiiAnonymizeResponse.ProtoReflect.Descriptor instead.
func (*PiiAnonymizeResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{12}
}

func (x *PiiAnonymizeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PiiAnonymizeResponse) GetRecoveryUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.RecoveryUntil
	}
	return nil
}

// Entity is a single entity definition
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId    string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SchemaId    string                 `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	StateChange *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	State       EntityState            `protobuf:"varint,6,opt,name=state,proto3,enum=kubex.keystone.EntityState" json:"state,omitempty"`
	// last update is specific to the dataset you are looking at, not the entire entity
	LastUpdate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_keystone_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{13}
}

func (x *Entity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Entity) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *Entity) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Entity) GetStateChange() *timestamppb.Timestamp {
	if x != nil {
		return x.StateChange
	}
	return nil
}

func (x *Entity) GetState() EntityState {
	if x != nil {
		return x.State
	}
	return EntityState_Invalid
}

func (x *Entity) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

// EntityProperty contains each property for an entity
type EntityProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property   string     `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Value      *Value     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ClearEmpty bool       `protobuf:"varint,3,opt,name=clear_empty,json=clearEmpty,proto3" json:"clear_empty,omitempty"` // Clear the values if no value has been sent
	Source     *VendorApp `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EntityProperty) Reset() {
	*x = EntityProperty{}
	mi := &file_keystone_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProperty) ProtoMessage() {}

func (x *EntityProperty) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProperty.ProtoReflect.Descriptor instead.
func (*EntityProperty) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{14}
}

func (x *EntityProperty) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *EntityProperty) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EntityProperty) GetClearEmpty() bool {
	if x != nil {
		return x.ClearEmpty
	}
	return false
}

func (x *EntityProperty) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

// EntityChild is a child entity, allowing data storage e.g. an invoice can store its items as children rather than separate entities
type EntityChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *Key              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cid            string            `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Value          int64             `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Data           map[string][]byte `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                               // Data to replace all existing
	AppendData     map[string][]byte `protobuf:"bytes,5,rep,name=append_data,json=appendData,proto3" json:"append_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Data to append
	RemoveData     []string          `protobuf:"bytes,6,rep,name=remove_data,json=removeData,proto3" json:"remove_data,omitempty"`                                                                                         //Keys to remove
	WriteReference string            `protobuf:"bytes,7,opt,name=write_reference,json=writeReference,proto3" json:"write_reference,omitempty"`                                                                             // Ephemeral reference for correlating the cid on new children
}

func (x *EntityChild) Reset() {
	*x = EntityChild{}
	mi := &file_keystone_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityChild) ProtoMessage() {}

func (x *EntityChild) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityChild.ProtoReflect.Descriptor instead.
func (*EntityChild) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{15}
}

func (x *EntityChild) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EntityChild) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *EntityChild) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EntityChild) GetData() map[string][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntityChild) GetAppendData() map[string][]byte {
	if x != nil {
		return x.AppendData
	}
	return nil
}

func (x *EntityChild) GetRemoveData() []string {
	if x != nil {
		return x.RemoveData
	}
	return nil
}

func (x *EntityChild) GetWriteReference() string {
	if x != nil {
		return x.WriteReference
	}
	return ""
}

// EntityDatum is a single data point for an entity, for storing a blob of data against the entity
type EntityDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntityDatum) Reset() {
	*x = EntityDatum{}
	mi := &file_keystone_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDatum) ProtoMessage() {}

func (x *EntityDatum) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDatum.ProtoReflect.Descriptor instead.
func (*EntityDatum) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{16}
}

func (x *EntityDatum) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *EntityDatum) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// EntityLog is a single log entry for an entity
type EntityLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor        string                 `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Tid          string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"` // Time ID - read only
	Level        LogLevel               `protobuf:"varint,3,opt,name=level,proto3,enum=kubex.keystone.LogLevel" json:"level,omitempty"`
	Message      string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Reference    string                 `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	TraceId      string                 `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Data         map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TtlRemaining int64                  `protobuf:"varint,9,opt,name=ttl_remaining,json=ttlRemaining,proto3" json:"ttl_remaining,omitempty"` // Read only
	AuditUser    *User                  `protobuf:"bytes,10,opt,name=audit_user,json=auditUser,proto3" json:"audit_user,omitempty"`          // User to attach to the log
}

func (x *EntityLog) Reset() {
	*x = EntityLog{}
	mi := &file_keystone_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLog) ProtoMessage() {}

func (x *EntityLog) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLog.ProtoReflect.Descriptor instead.
func (*EntityLog) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{17}
}

func (x *EntityLog) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *EntityLog) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *EntityLog) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_Debug
}

func (x *EntityLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EntityLog) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EntityLog) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *EntityLog) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EntityLog) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntityLog) GetTtlRemaining() int64 {
	if x != nil {
		return x.TtlRemaining
	}
	return 0
}

func (x *EntityLog) GetAuditUser() *User {
	if x != nil {
		return x.AuditUser
	}
	return nil
}

// EntityEvent is a single event for an entity, for storing a blob of data against the event for filtering
type EntityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *Key                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tid        string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Version    string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Data       map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TtlSeconds int32                  `protobuf:"varint,9,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *EntityEvent) Reset() {
	*x = EntityEvent{}
	mi := &file_keystone_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEvent) ProtoMessage() {}

func (x *EntityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEvent.ProtoReflect.Descriptor instead.
func (*EntityEvent) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{18}
}

func (x *EntityEvent) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EntityEvent) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *EntityEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EntityEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EntityEvent) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntityEvent) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

// EntityRelationship is a relationship between two entities
type EntityRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship *Key                   `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	TargetId     string                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Since        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
	Data         map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntityRelationship) Reset() {
	*x = EntityRelationship{}
	mi := &file_keystone_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRelationship) ProtoMessage() {}

func (x *EntityRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRelationship.ProtoReflect.Descriptor instead.
func (*EntityRelationship) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{19}
}

func (x *EntityRelationship) GetRelationship() *Key {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *EntityRelationship) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *EntityRelationship) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *EntityRelationship) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntityLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EntityLabel) Reset() {
	*x = EntityLabel{}
	mi := &file_keystone_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLabel) ProtoMessage() {}

func (x *EntityLabel) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLabel.ProtoReflect.Descriptor instead.
func (*EntityLabel) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{20}
}

func (x *EntityLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityLabel) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EntitySensorMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor string                 `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	At     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	Value  float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Data   map[string]string      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntitySensorMeasurement) Reset() {
	*x = EntitySensorMeasurement{}
	mi := &file_keystone_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitySensorMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySensorMeasurement) ProtoMessage() {}

func (x *EntitySensorMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySensorMeasurement.ProtoReflect.Descriptor instead.
func (*EntitySensorMeasurement) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{21}
}

func (x *EntitySensorMeasurement) GetSensor() string {
	if x != nil {
		return x.Sensor
	}
	return ""
}

func (x *EntitySensorMeasurement) GetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *EntitySensorMeasurement) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EntitySensorMeasurement) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntityObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path               string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type               ObjectType             `protobuf:"varint,2,opt,name=type,proto3,enum=kubex.keystone.ObjectType" json:"type,omitempty"`
	Crc32C             string                 `protobuf:"bytes,3,opt,name=crc32c,proto3" json:"crc32c,omitempty"`
	Md5                string                 `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	Size               int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Data               []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`      // Data for the object when storing within Keystone
	Url                string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`        // Signed URL for upload / download
	Public             bool                   `protobuf:"varint,8,opt,name=public,proto3" json:"public,omitempty"` // Publicly accessible
	Expiry             *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiry,proto3" json:"expiry,omitempty"`  // TTL To apply when writing, 0 for no TTL
	ContentType        string                 `protobuf:"bytes,10,opt,name=contentType,proto3" json:"contentType,omitempty"`
	ContentDisposition string                 `protobuf:"bytes,11,opt,name=contentDisposition,proto3" json:"contentDisposition,omitempty"`
	ContentEncoding    string                 `protobuf:"bytes,12,opt,name=contentEncoding,proto3" json:"contentEncoding,omitempty"`
	ContentLanguage    string                 `protobuf:"bytes,13,opt,name=contentLanguage,proto3" json:"contentLanguage,omitempty"`
	Metadata           map[string]string      `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UploadHeaders      map[string]string      `protobuf:"bytes,15,rep,name=upload_headers,json=uploadHeaders,proto3" json:"upload_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntityObject) Reset() {
	*x = EntityObject{}
	mi := &file_keystone_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityObject) ProtoMessage() {}

func (x *EntityObject) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityObject.ProtoReflect.Descriptor instead.
func (*EntityObject) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{22}
}

func (x *EntityObject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EntityObject) GetType() ObjectType {
	if x != nil {
		return x.Type
	}
	return ObjectType_None
}

func (x *EntityObject) GetCrc32C() string {
	if x != nil {
		return x.Crc32C
	}
	return ""
}

func (x *EntityObject) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *EntityObject) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EntityObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntityObject) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EntityObject) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *EntityObject) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *EntityObject) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EntityObject) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

func (x *EntityObject) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *EntityObject) GetContentLanguage() string {
	if x != nil {
		return x.ContentLanguage
	}
	return ""
}

func (x *EntityObject) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EntityObject) GetUploadHeaders() map[string]string {
	if x != nil {
		return x.UploadHeaders
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent string     `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	RemoteIp  string     `protobuf:"bytes,2,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	UserId    string     `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Client    string     `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	Source    *VendorApp `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Parent    *User      `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_keystone_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{23}
}

func (x *User) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *User) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *User) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *User) GetParent() *User {
	if x != nil {
		return x.Parent
	}
	return nil
}

type Mutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mutator                 *User                      `protobuf:"bytes,1,opt,name=mutator,proto3" json:"mutator,omitempty"`
	Timestamp               *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Comment                 string                     `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	State                   EntityState                `protobuf:"varint,4,opt,name=state,proto3,enum=kubex.keystone.EntityState" json:"state,omitempty"`
	Properties              []*EntityProperty          `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
	DynamicProperties       []*EntityProperty          `protobuf:"bytes,7,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
	RemoveDynamicProperties []string                   `protobuf:"bytes,8,rep,name=remove_dynamic_properties,json=removeDynamicProperties,proto3" json:"remove_dynamic_properties,omitempty"`
	Logs                    []*EntityLog               `protobuf:"bytes,9,rep,name=logs,proto3" json:"logs,omitempty"`
	Events                  []*EntityEvent             `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Children                []*EntityChild             `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`
	RemoveChildren          []*EntityChild             `protobuf:"bytes,12,rep,name=remove_children,json=removeChildren,proto3" json:"remove_children,omitempty"`
	Relationships           []*EntityRelationship      `protobuf:"bytes,13,rep,name=relationships,proto3" json:"relationships,omitempty"`
	RemoveRelationships     []*EntityRelationship      `protobuf:"bytes,14,rep,name=remove_relationships,json=removeRelationships,proto3" json:"remove_relationships,omitempty"`
	Labels                  []*EntityLabel             `protobuf:"bytes,17,rep,name=labels,proto3" json:"labels,omitempty"`
	RemoveLabels            []*EntityLabel             `protobuf:"bytes,18,rep,name=remove_labels,json=removeLabels,proto3" json:"remove_labels,omitempty"`
	Measurements            []*EntitySensorMeasurement `protobuf:"bytes,19,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Datum                   []byte                     `protobuf:"bytes,20,opt,name=datum,proto3" json:"datum,omitempty"`
	Objects                 []*EntityObject            `protobuf:"bytes,21,rep,name=objects,proto3" json:"objects,omitempty"`
	PiiToken                string                     `protobuf:"bytes,22,opt,name=pii_token,json=piiToken,proto3" json:"pii_token,omitempty"`
	PiiReference            *Key                       `protobuf:"bytes,23,opt,name=pii_reference,json=piiReference,proto3" json:"pii_reference,omitempty"`
	RemoveAllChildrenByType []*Key                     `protobuf:"bytes,24,rep,name=remove_all_children_by_type,json=removeAllChildrenByType,proto3" json:"remove_all_children_by_type,omitempty"` // Remove all children of this entity
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	mi := &file_keystone_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutation.ProtoReflect.Descriptor instead.
func (*Mutation) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{24}
}

func (x *Mutation) GetMutator() *User {
	if x != nil {
		return x.Mutator
	}
	return nil
}

func (x *Mutation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Mutation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Mutation) GetState() EntityState {
	if x != nil {
		return x.State
	}
	return EntityState_Invalid
}

func (x *Mutation) GetProperties() []*EntityProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Mutation) GetDynamicProperties() []*EntityProperty {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

func (x *Mutation) GetRemoveDynamicProperties() []string {
	if x != nil {
		return x.RemoveDynamicProperties
	}
	return nil
}

func (x *Mutation) GetLogs() []*EntityLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Mutation) GetEvents() []*EntityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Mutation) GetChildren() []*EntityChild {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Mutation) GetRemoveChildren() []*EntityChild {
	if x != nil {
		return x.RemoveChildren
	}
	return nil
}

func (x *Mutation) GetRelationships() []*EntityRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *Mutation) GetRemoveRelationships() []*EntityRelationship {
	if x != nil {
		return x.RemoveRelationships
	}
	return nil
}

func (x *Mutation) GetLabels() []*EntityLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Mutation) GetRemoveLabels() []*EntityLabel {
	if x != nil {
		return x.RemoveLabels
	}
	return nil
}

func (x *Mutation) GetMeasurements() []*EntitySensorMeasurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *Mutation) GetDatum() []byte {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *Mutation) GetObjects() []*EntityObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Mutation) GetPiiToken() string {
	if x != nil {
		return x.PiiToken
	}
	return ""
}

func (x *Mutation) GetPiiReference() *Key {
	if x != nil {
		return x.PiiReference
	}
	return nil
}

func (x *Mutation) GetRemoveAllChildrenByType() []*Key {
	if x != nil {
		return x.RemoveAllChildrenByType
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Logs          []*EntityLog   `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_keystone_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{25}
}

func (x *LogRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *LogRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogRequest) GetLogs() []*EntityLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string            `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode    int32             `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	EntityId     string            `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Extended     *ExtendedResponse `protobuf:"bytes,5,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_keystone_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{26}
}

func (x *LogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LogResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *LogResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *LogResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *Window) Reset() {
	*x = Window{}
	mi := &file_keystone_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{27}
}

func (x *Window) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *Window) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type PropertyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property string            `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Operator Operator          `protobuf:"varint,2,opt,name=operator,proto3,enum=kubex.keystone.Operator" json:"operator,omitempty"`
	Values   []*Value          `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"` // Combined for in/not_in, or multiple for other operators
	Nested   []*PropertyFilter `protobuf:"bytes,5,rep,name=nested,proto3" json:"nested,omitempty"`
	Or       bool              `protobuf:"varint,6,opt,name=or,proto3" json:"or,omitempty"` // OR nested filters, when false, nested filters will be AND
}

func (x *PropertyFilter) Reset() {
	*x = PropertyFilter{}
	mi := &file_keystone_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyFilter) ProtoMessage() {}

func (x *PropertyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyFilter.ProtoReflect.Descriptor instead.
func (*PropertyFilter) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{28}
}

func (x *PropertyFilter) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyFilter) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_Equal
}

func (x *PropertyFilter) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PropertyFilter) GetNested() []*PropertyFilter {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *PropertyFilter) GetOr() bool {
	if x != nil {
		return x.Or
	}
	return false
}

type PropertySort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property   string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Descending bool   `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *PropertySort) Reset() {
	*x = PropertySort{}
	mi := &file_keystone_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertySort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertySort) ProtoMessage() {}

func (x *PropertySort) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertySort.ProtoReflect.Descriptor instead.
func (*PropertySort) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{29}
}

func (x *PropertySort) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertySort) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

type SchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Schema        `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Views         []*EntityView  `protobuf:"bytes,3,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *SchemaRequest) Reset() {
	*x = SchemaRequest{}
	mi := &file_keystone_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRequest) ProtoMessage() {}

func (x *SchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRequest.ProtoReflect.Descriptor instead.
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{30}
}

func (x *SchemaRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *SchemaRequest) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaRequest) GetViews() []*EntityView {
	if x != nil {
		return x.Views
	}
	return nil
}

type MutateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization                 *Authorization               `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId                      string                       `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Schema                        *Key                         `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Mutation                      *Mutation                    `protobuf:"bytes,5,opt,name=mutation,proto3" json:"mutation,omitempty"`
	ConflictUniquePropertyAcquire []string                     `protobuf:"bytes,6,rep,name=conflict_unique_property_acquire,json=conflictUniquePropertyAcquire,proto3" json:"conflict_unique_property_acquire,omitempty"`
	Options                       []MutateRequest_MutateOption `protobuf:"varint,8,rep,packed,name=options,proto3,enum=kubex.keystone.MutateRequest_MutateOption" json:"options,omitempty"`
	Where                         []*PropertyFilter            `protobuf:"bytes,9,rep,name=where,proto3" json:"where,omitempty"` // Forces a read prior to writing, can only be done for entity properties
}

func (x *MutateRequest) Reset() {
	*x = MutateRequest{}
	mi := &file_keystone_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRequest) ProtoMessage() {}

func (x *MutateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRequest.ProtoReflect.Descriptor instead.
func (*MutateRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{31}
}

func (x *MutateRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *MutateRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *MutateRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *MutateRequest) GetMutation() *Mutation {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *MutateRequest) GetConflictUniquePropertyAcquire() []string {
	if x != nil {
		return x.ConflictUniquePropertyAcquire
	}
	return nil
}

func (x *MutateRequest) GetOptions() []MutateRequest_MutateOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *MutateRequest) GetWhere() []*PropertyFilter {
	if x != nil {
		return x.Where
	}
	return nil
}

type ReportTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization         `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Schema        *Key                   `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Mutation      *Mutation              `protobuf:"bytes,5,opt,name=mutation,proto3" json:"mutation,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReportTimeSeriesRequest) Reset() {
	*x = ReportTimeSeriesRequest{}
	mi := &file_keystone_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTimeSeriesRequest) ProtoMessage() {}

func (x *ReportTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*ReportTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{32}
}

func (x *ReportTimeSeriesRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ReportTimeSeriesRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ReportTimeSeriesRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ReportTimeSeriesRequest) GetMutation() *Mutation {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *ReportTimeSeriesRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EntityView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Summary               bool               `protobuf:"varint,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Datum                 bool               `protobuf:"varint,5,opt,name=datum,proto3" json:"datum,omitempty"`
	Labels                bool               `protobuf:"varint,6,opt,name=labels,proto3" json:"labels,omitempty"`
	Properties            []*PropertyRequest `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty"`
	Children              []*ChildRequest    `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	RelationshipByType    []*Key             `protobuf:"bytes,11,rep,name=relationship_by_type,json=relationshipByType,proto3" json:"relationship_by_type,omitempty"`
	DescendantCountType   []*Key             `protobuf:"bytes,12,rep,name=descendant_count_type,json=descendantCountType,proto3" json:"descendant_count_type,omitempty"`
	RelationshipCount     bool               `protobuf:"varint,13,opt,name=relationship_count,json=relationshipCount,proto3" json:"relationship_count,omitempty"`
	RelationshipCountType []*Key             `protobuf:"bytes,14,rep,name=relationship_count_type,json=relationshipCountType,proto3" json:"relationship_count_type,omitempty"`
	ChildSummary          bool               `protobuf:"varint,15,opt,name=child_summary,json=childSummary,proto3" json:"child_summary,omitempty"`
	DynamicProperties     []string           `protobuf:"bytes,17,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
	ListObjects           bool               `protobuf:"varint,18,opt,name=list_objects,json=listObjects,proto3" json:"list_objects,omitempty"`
	ObjectPaths           []string           `protobuf:"bytes,19,rep,name=object_paths,json=objectPaths,proto3" json:"object_paths,omitempty"` // Paths for objects to retrieve
}

func (x *EntityView) Reset() {
	*x = EntityView{}
	mi := &file_keystone_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityView) ProtoMessage() {}

func (x *EntityView) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityView.ProtoReflect.Descriptor instead.
func (*EntityView) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{33}
}

func (x *EntityView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityView) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

func (x *EntityView) GetDatum() bool {
	if x != nil {
		return x.Datum
	}
	return false
}

func (x *EntityView) GetLabels() bool {
	if x != nil {
		return x.Labels
	}
	return false
}

func (x *EntityView) GetProperties() []*PropertyRequest {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *EntityView) GetChildren() []*ChildRequest {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EntityView) GetRelationshipByType() []*Key {
	if x != nil {
		return x.RelationshipByType
	}
	return nil
}

func (x *EntityView) GetDescendantCountType() []*Key {
	if x != nil {
		return x.DescendantCountType
	}
	return nil
}

func (x *EntityView) GetRelationshipCount() bool {
	if x != nil {
		return x.RelationshipCount
	}
	return false
}

func (x *EntityView) GetRelationshipCountType() []*Key {
	if x != nil {
		return x.RelationshipCountType
	}
	return nil
}

func (x *EntityView) GetChildSummary() bool {
	if x != nil {
		return x.ChildSummary
	}
	return false
}

func (x *EntityView) GetDynamicProperties() []string {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

func (x *EntityView) GetListObjects() bool {
	if x != nil {
		return x.ListObjects
	}
	return false
}

func (x *EntityView) GetObjectPaths() []string {
	if x != nil {
		return x.ObjectPaths
	}
	return nil
}

type TypeCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Key  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TypeCount) Reset() {
	*x = TypeCount{}
	mi := &file_keystone_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCount) ProtoMessage() {}

func (x *TypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCount.ProtoReflect.Descriptor instead.
func (*TypeCount) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{34}
}

func (x *TypeCount) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TypeCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChildSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Key  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sum   int64 `protobuf:"varint,3,opt,name=sum,proto3" json:"sum,omitempty"`
	Min   int64 `protobuf:"varint,4,opt,name=min,proto3" json:"min,omitempty"`
	Max   int64 `protobuf:"varint,5,opt,name=max,proto3" json:"max,omitempty"`
	Avg   int64 `protobuf:"varint,6,opt,name=avg,proto3" json:"avg,omitempty"`
}

func (x *ChildSummary) Reset() {
	*x = ChildSummary{}
	mi := &file_keystone_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildSummary) ProtoMessage() {}

func (x *ChildSummary) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildSummary.ProtoReflect.Descriptor instead.
func (*ChildSummary) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{35}
}

func (x *ChildSummary) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChildSummary) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ChildSummary) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *ChildSummary) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ChildSummary) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ChildSummary) GetAvg() int64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

type EntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization    *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId         string            `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	UniqueId         *IDLookup         `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	View             *EntityView       `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	Schema           *Key              `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	RequestLock      bool              `protobuf:"varint,6,opt,name=request_lock,json=requestLock,proto3" json:"request_lock,omitempty"`
	LockTtlSeconds   int32             `protobuf:"varint,7,opt,name=lock_ttl_seconds,json=lockTtlSeconds,proto3" json:"lock_ttl_seconds,omitempty"`
	LockMessage      string            `protobuf:"bytes,8,opt,name=lock_message,json=lockMessage,proto3" json:"lock_message,omitempty"`
	VerifyProperties []*EntityProperty `protobuf:"bytes,9,rep,name=verify_properties,json=verifyProperties,proto3" json:"verify_properties,omitempty"`
}

func (x *EntityRequest) Reset() {
	*x = EntityRequest{}
	mi := &file_keystone_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRequest) ProtoMessage() {}

func (x *EntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRequest.ProtoReflect.Descriptor instead.
func (*EntityRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{36}
}

func (x *EntityRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *EntityRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityRequest) GetUniqueId() *IDLookup {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *EntityRequest) GetView() *EntityView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *EntityRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *EntityRequest) GetRequestLock() bool {
	if x != nil {
		return x.RequestLock
	}
	return false
}

func (x *EntityRequest) GetLockTtlSeconds() int32 {
	if x != nil {
		return x.LockTtlSeconds
	}
	return 0
}

func (x *EntityRequest) GetLockMessage() string {
	if x != nil {
		return x.LockMessage
	}
	return ""
}

func (x *EntityRequest) GetVerifyProperties() []*EntityProperty {
	if x != nil {
		return x.VerifyProperties
	}
	return nil
}

type EntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity             *Entity               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Properties         []*EntityProperty     `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	Children           []*EntityChild        `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Datum              *EntityDatum          `protobuf:"bytes,5,opt,name=datum,proto3" json:"datum,omitempty"`
	Relationships      []*EntityRelationship `protobuf:"bytes,6,rep,name=relationships,proto3" json:"relationships,omitempty"`
	Labels             []*EntityLabel        `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	RelationshipCounts []*TypeCount          `protobuf:"bytes,8,rep,name=relationship_counts,json=relationshipCounts,proto3" json:"relationship_counts,omitempty"`
	DescendantCounts   []*TypeCount          `protobuf:"bytes,9,rep,name=descendant_counts,json=descendantCounts,proto3" json:"descendant_counts,omitempty"`
	ChildSummary       []*ChildSummary       `protobuf:"bytes,10,rep,name=child_summary,json=childSummary,proto3" json:"child_summary,omitempty"`
	Objects            []*EntityObject       `protobuf:"bytes,11,rep,name=objects,proto3" json:"objects,omitempty"`
	DynamicProperties  []*EntityProperty     `protobuf:"bytes,12,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
	Lock               *EntityLock           `protobuf:"bytes,14,opt,name=lock,proto3" json:"lock,omitempty"`
	Extended           *ExtendedResponse     `protobuf:"bytes,15,opt,name=extended,proto3" json:"extended,omitempty"`
	Exists             *bool                 `protobuf:"varint,16,opt,name=exists,proto3,oneof" json:"exists,omitempty"`
}

func (x *EntityResponse) Reset() {
	*x = EntityResponse{}
	mi := &file_keystone_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityResponse) ProtoMessage() {}

func (x *EntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityResponse.ProtoReflect.Descriptor instead.
func (*EntityResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{37}
}

func (x *EntityResponse) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *EntityResponse) GetProperties() []*EntityProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *EntityResponse) GetChildren() []*EntityChild {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EntityResponse) GetDatum() *EntityDatum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *EntityResponse) GetRelationships() []*EntityRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *EntityResponse) GetLabels() []*EntityLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EntityResponse) GetRelationshipCounts() []*TypeCount {
	if x != nil {
		return x.RelationshipCounts
	}
	return nil
}

func (x *EntityResponse) GetDescendantCounts() []*TypeCount {
	if x != nil {
		return x.DescendantCounts
	}
	return nil
}

func (x *EntityResponse) GetChildSummary() []*ChildSummary {
	if x != nil {
		return x.ChildSummary
	}
	return nil
}

func (x *EntityResponse) GetObjects() []*EntityObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *EntityResponse) GetDynamicProperties() []*EntityProperty {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

func (x *EntityResponse) GetLock() *EntityLock {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *EntityResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *EntityResponse) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

type EntityLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockAcquired bool                   `protobuf:"varint,1,opt,name=lock_acquired,json=lockAcquired,proto3" json:"lock_acquired,omitempty"`
	LockId       string                 `protobuf:"bytes,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	LockedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=locked_until,json=lockedUntil,proto3" json:"locked_until,omitempty"`
	Message      string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EntityLock) Reset() {
	*x = EntityLock{}
	mi := &file_keystone_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLock) ProtoMessage() {}

func (x *EntityLock) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLock.ProtoReflect.Descriptor instead.
func (*EntityLock) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{38}
}

func (x *EntityLock) GetLockAcquired() bool {
	if x != nil {
		return x.LockAcquired
	}
	return false
}

func (x *EntityLock) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

func (x *EntityLock) GetLockedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedUntil
	}
	return nil
}

func (x *EntityLock) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MutateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId    string            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Success          bool              `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage     string            `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode        int32             `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	EntityId         string            `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Extended         *ExtendedResponse `protobuf:"bytes,6,opt,name=extended,proto3" json:"extended,omitempty"`
	SignedObjectUrls []*EntityObject   `protobuf:"bytes,7,rep,name=signed_object_urls,json=signedObjectUrls,proto3" json:"signed_object_urls,omitempty"`                                                                                    // URLs to upload object data to
	CreatedChildren  map[string]string `protobuf:"bytes,8,rep,name=created_children,json=createdChildren,proto3" json:"created_children,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Child Reference > Child ID
}

func (x *MutateResponse) Reset() {
	*x = MutateResponse{}
	mi := &file_keystone_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResponse) ProtoMessage() {}

func (x *MutateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResponse.ProtoReflect.Descriptor instead.
func (*MutateResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{39}
}

func (x *MutateResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *MutateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MutateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MutateResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *MutateResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *MutateResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *MutateResponse) GetSignedObjectUrls() []*EntityObject {
	if x != nil {
		return x.SignedObjectUrls
	}
	return nil
}

func (x *MutateResponse) GetCreatedChildren() map[string]string {
	if x != nil {
		return x.CreatedChildren
	}
	return nil
}

type IDLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	UniqueId string `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (x *IDLookup) Reset() {
	*x = IDLookup{}
	mi := &file_keystone_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDLookup) ProtoMessage() {}

func (x *IDLookup) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDLookup.ProtoReflect.Descriptor instead.
func (*IDLookup) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{40}
}

func (x *IDLookup) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *IDLookup) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *IDLookup) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

type PropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Properties []string   `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	Decrypt    bool       `protobuf:"varint,3,opt,name=decrypt,proto3" json:"decrypt,omitempty"`
}

func (x *PropertyRequest) Reset() {
	*x = PropertyRequest{}
	mi := &file_keystone_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRequest) ProtoMessage() {}

func (x *PropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRequest.ProtoReflect.Descriptor instead.
func (*PropertyRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{41}
}

func (x *PropertyRequest) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PropertyRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PropertyRequest) GetDecrypt() bool {
	if x != nil {
		return x.Decrypt
	}
	return false
}

type ChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Key     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cid  []string `protobuf:"bytes,2,rep,name=cid,proto3" json:"cid,omitempty"`
}

func (x *ChildRequest) Reset() {
	*x = ChildRequest{}
	mi := &file_keystone_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildRequest) ProtoMessage() {}

func (x *ChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildRequest.ProtoReflect.Descriptor instead.
func (*ChildRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{42}
}

func (x *ChildRequest) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChildRequest) GetCid() []string {
	if x != nil {
		return x.Cid
	}
	return nil
}

type LogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Type          *Key           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Levels        []LogLevel     `protobuf:"varint,5,rep,packed,name=levels,proto3,enum=kubex.keystone.LogLevel" json:"levels,omitempty"`
	MinLevel      LogLevel       `protobuf:"varint,6,opt,name=min_level,json=minLevel,proto3,enum=kubex.keystone.LogLevel" json:"min_level,omitempty"`
	Window        *Window        `protobuf:"bytes,7,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *LogsRequest) Reset() {
	*x = LogsRequest{}
	mi := &file_keystone_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsRequest) ProtoMessage() {}

func (x *LogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsRequest.ProtoReflect.Descriptor instead.
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{43}
}

func (x *LogsRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *LogsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogsRequest) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *LogsRequest) GetLevels() []LogLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *LogsRequest) GetMinLevel() LogLevel {
	if x != nil {
		return x.MinLevel
	}
	return LogLevel_Debug
}

func (x *LogsRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*EntityLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	mi := &file_keystone_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{44}
}

func (x *LogsResponse) GetLogs() []*EntityLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization  *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId       string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EventByType    []*Key         `protobuf:"bytes,12,rep,name=event_by_type,json=eventByType,proto3" json:"event_by_type,omitempty"`
	EventsInWindow *Window        `protobuf:"bytes,13,opt,name=events_in_window,json=eventsInWindow,proto3" json:"events_in_window,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	mi := &file_keystone_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{45}
}

func (x *EventRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *EventRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EventRequest) GetEventByType() []*Key {
	if x != nil {
		return x.EventByType
	}
	return nil
}

func (x *EventRequest) GetEventsInWindow() *Window {
	if x != nil {
		return x.EventsInWindow
	}
	return nil
}

type EventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EntityEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventsResponse) Reset() {
	*x = EventsResponse{}
	mi := &file_keystone_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse) ProtoMessage() {}

func (x *EventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse.ProtoReflect.Descriptor instead.
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{46}
}

func (x *EventsResponse) GetEvents() []*EntityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RelationOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship  *Key   `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	SourceId      string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *RelationOf) Reset() {
	*x = RelationOf{}
	mi := &file_keystone_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationOf) ProtoMessage() {}

func (x *RelationOf) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationOf.ProtoReflect.Descriptor instead.
func (*RelationOf) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{47}
}

func (x *RelationOf) GetRelationship() *Key {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *RelationOf) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *RelationOf) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	View          *EntityView    `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
	// Filtering
	EntityIds       []string          `protobuf:"bytes,4,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	RelationOf      *RelationOf       `protobuf:"bytes,5,opt,name=relation_of,json=relationOf,proto3" json:"relation_of,omitempty"`
	PropertyFilters []*PropertyFilter `protobuf:"bytes,6,rep,name=property_filters,json=propertyFilters,proto3" json:"property_filters,omitempty"`
	LabelFilters    []*EntityLabel    `protobuf:"bytes,7,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
	ParentEntityId  string            `protobuf:"bytes,8,opt,name=parent_entity_id,json=parentEntityId,proto3" json:"parent_entity_id,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	mi := &file_keystone_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{48}
}

func (x *FindRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *FindRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *FindRequest) GetView() *EntityView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *FindRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *FindRequest) GetRelationOf() *RelationOf {
	if x != nil {
		return x.RelationOf
	}
	return nil
}

func (x *FindRequest) GetPropertyFilters() []*PropertyFilter {
	if x != nil {
		return x.PropertyFilters
	}
	return nil
}

func (x *FindRequest) GetLabelFilters() []*EntityLabel {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *FindRequest) GetParentEntityId() string {
	if x != nil {
		return x.ParentEntityId
	}
	return ""
}

type FindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	// TODO: Add pagination
	TotalResults int32             `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	ResultId     string            `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	Extended     *ExtendedResponse `protobuf:"bytes,4,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *FindResponse) Reset() {
	*x = FindResponse{}
	mi := &file_keystone_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResponse) ProtoMessage() {}

func (x *FindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResponse.ProtoReflect.Descriptor instead.
func (*FindResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{49}
}

func (x *FindResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *FindResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *FindResponse) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *FindResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` // Offset page * per_page (Page should start at 1)
	PerPage    int32  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`          // Items per page
	AfterId    string `protobuf:"bytes,3,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`           // Cursor for pagination - page number ignored
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	mi := &file_keystone_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{50}
}

func (x *PageRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *PageRequest) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

// Deprecated: Marked as deprecated in keystone.proto.
type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Properties    []string          `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"` // Only properties within the ADS can be requested, specifying no properties will return all results
	Filters       []*PropertyFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort          []*PropertySort   `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	Page          *PageRequest      `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_keystone_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{51}
}

func (x *ListRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ListRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ListRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ListRequest) GetFilters() []*PropertyFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListRequest) GetSort() []*PropertySort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

// Deprecated: Marked as deprecated in keystone.proto.
type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities     []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	TotalResults int32             `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	Extended     *ExtendedResponse `protobuf:"bytes,3,opt,name=extended,proto3" json:"extended,omitempty"`
	LastId       string            `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_keystone_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{52}
}

func (x *ListResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ListResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *ListResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *ListResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

type QueryIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Properties    []string          `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"` // Only properties within the ADS can be requested, specifying no properties will return all results
	Filters       []*PropertyFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort          []*PropertySort   `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	Page          *PageRequest      `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *QueryIndexRequest) Reset() {
	*x = QueryIndexRequest{}
	mi := &file_keystone_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIndexRequest) ProtoMessage() {}

func (x *QueryIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIndexRequest.ProtoReflect.Descriptor instead.
func (*QueryIndexRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{53}
}

func (x *QueryIndexRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *QueryIndexRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *QueryIndexRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *QueryIndexRequest) GetFilters() []*PropertyFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryIndexRequest) GetSort() []*PropertySort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *QueryIndexRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type QueryIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities     []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	TotalResults int32             `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	Extended     *ExtendedResponse `protobuf:"bytes,3,opt,name=extended,proto3" json:"extended,omitempty"`
	LastId       string            `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *QueryIndexResponse) Reset() {
	*x = QueryIndexResponse{}
	mi := &file_keystone_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIndexResponse) ProtoMessage() {}

func (x *QueryIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIndexResponse.ProtoReflect.Descriptor instead.
func (*QueryIndexResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{54}
}

func (x *QueryIndexResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *QueryIndexResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *QueryIndexResponse) GetExtended() *ExtendedResponse {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *QueryIndexResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

type GroupCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Properties    []string          `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
	Filters       []*PropertyFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Page          *PageRequest      `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GroupCountRequest) Reset() {
	*x = GroupCountRequest{}
	mi := &file_keystone_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCountRequest) ProtoMessage() {}

func (x *GroupCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCountRequest.ProtoReflect.Descriptor instead.
func (*GroupCountRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{55}
}

func (x *GroupCountRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *GroupCountRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GroupCountRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GroupCountRequest) GetFilters() []*PropertyFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GroupCountRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type GroupCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GroupCountResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GroupCountResponse) Reset() {
	*x = GroupCountResponse{}
	mi := &file_keystone_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCountResponse) ProtoMessage() {}

func (x *GroupCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCountResponse.ProtoReflect.Descriptor instead.
func (*GroupCountResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{56}
}

func (x *GroupCountResponse) GetResults() []*GroupCountResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type EntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *EntitiesResponse) Reset() {
	*x = EntitiesResponse{}
	mi := &file_keystone_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitiesResponse) ProtoMessage() {}

func (x *EntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitiesResponse.ProtoReflect.Descriptor instead.
func (*EntitiesResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{57}
}

func (x *EntitiesResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_keystone_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{58}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type SchemaStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization    *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema           *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	CreatedFrom      *Date          `protobuf:"bytes,3,opt,name=created_from,json=createdFrom,proto3" json:"created_from,omitempty"` // Inclusive
	CreatedUntil     *Date          `protobuf:"bytes,4,opt,name=created_until,json=createdUntil,proto3" json:"created_until,omitempty"`
	IncludeBreakdown bool           `protobuf:"varint,5,opt,name=include_breakdown,json=includeBreakdown,proto3" json:"include_breakdown,omitempty"`
	DayLimit         int32          `protobuf:"varint,6,opt,name=day_limit,json=dayLimit,proto3" json:"day_limit,omitempty"` // Max number of days with results to return
}

func (x *SchemaStatisticsRequest) Reset() {
	*x = SchemaStatisticsRequest{}
	mi := &file_keystone_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStatisticsRequest) ProtoMessage() {}

func (x *SchemaStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStatisticsRequest.ProtoReflect.Descriptor instead.
func (*SchemaStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{59}
}

func (x *SchemaStatisticsRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetCreatedFrom() *Date {
	if x != nil {
		return x.CreatedFrom
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetCreatedUntil() *Date {
	if x != nil {
		return x.CreatedUntil
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetIncludeBreakdown() bool {
	if x != nil {
		return x.IncludeBreakdown
	}
	return false
}

func (x *SchemaStatisticsRequest) GetDayLimit() int32 {
	if x != nil {
		return x.DayLimit
	}
	return 0
}

type SchemaStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyCount   map[string]int64 `protobuf:"bytes,1,rep,name=daily_count,json=dailyCount,proto3" json:"daily_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // YYYY-MM-DD
	InRangeCount int64            `protobuf:"varint,2,opt,name=in_range_count,json=inRangeCount,proto3" json:"in_range_count,omitempty"`
}

func (x *SchemaStatisticsResponse) Reset() {
	*x = SchemaStatisticsResponse{}
	mi := &file_keystone_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStatisticsResponse) ProtoMessage() {}

func (x *SchemaStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStatisticsResponse.ProtoReflect.Descriptor instead.
func (*SchemaStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{60}
}

func (x *SchemaStatisticsResponse) GetDailyCount() map[string]int64 {
	if x != nil {
		return x.DailyCount
	}
	return nil
}

func (x *SchemaStatisticsResponse) GetInRangeCount() int64 {
	if x != nil {
		return x.InRangeCount
	}
	return 0
}

type DailyEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Date          *Date          `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	AfterId       string         `protobuf:"bytes,4,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`
	ReverseOrder  bool           `protobuf:"varint,5,opt,name=reverse_order,json=reverseOrder,proto3" json:"reverse_order,omitempty"`
	Limit         int32          `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DailyEntityRequest) Reset() {
	*x = DailyEntityRequest{}
	mi := &file_keystone_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyEntityRequest) ProtoMessage() {}

func (x *DailyEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyEntityRequest.ProtoReflect.Descriptor instead.
func (*DailyEntityRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{61}
}

func (x *DailyEntityRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *DailyEntityRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DailyEntityRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DailyEntityRequest) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *DailyEntityRequest) GetReverseOrder() bool {
	if x != nil {
		return x.ReverseOrder
	}
	return false
}

func (x *DailyEntityRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DailyEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities map[string]string `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Creation ID > Entity ID
	FirstId  string            `protobuf:"bytes,2,opt,name=first_id,json=firstId,proto3" json:"first_id,omitempty"`
	LastId   string            `protobuf:"bytes,3,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *DailyEntityResponse) Reset() {
	*x = DailyEntityResponse{}
	mi := &file_keystone_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyEntityResponse) ProtoMessage() {}

func (x *DailyEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyEntityResponse.ProtoReflect.Descriptor instead.
func (*DailyEntityResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{62}
}

func (x *DailyEntityResponse) GetEntities() map[string]string {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *DailyEntityResponse) GetFirstId() string {
	if x != nil {
		return x.FirstId
	}
	return ""
}

func (x *DailyEntityResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

type ChartTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization   *Authorization         `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema          *Key                   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	From            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Until           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=until,proto3" json:"until,omitempty"`
	Interval        string                 `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`
	Timezone        string                 `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	SeriesProperty  string                 `protobuf:"bytes,7,opt,name=series_property,json=seriesProperty,proto3" json:"series_property,omitempty"`
	Aggregations    []*PropertyAggregation `protobuf:"bytes,8,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	PropertyFilters []*PropertyFilter      `protobuf:"bytes,9,rep,name=property_filters,json=propertyFilters,proto3" json:"property_filters,omitempty"`
	FillMissing     bool                   `protobuf:"varint,10,opt,name=fill_missing,json=fillMissing,proto3" json:"fill_missing,omitempty"`
}

func (x *ChartTimeSeriesRequest) Reset() {
	*x = ChartTimeSeriesRequest{}
	mi := &file_keystone_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTimeSeriesRequest) ProtoMessage() {}

func (x *ChartTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*ChartTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{63}
}

func (x *ChartTimeSeriesRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *ChartTimeSeriesRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ChartTimeSeriesRequest) GetSeriesProperty() string {
	if x != nil {
		return x.SeriesProperty
	}
	return ""
}

func (x *ChartTimeSeriesRequest) GetAggregations() []*PropertyAggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetPropertyFilters() []*PropertyFilter {
	if x != nil {
		return x.PropertyFilters
	}
	return nil
}

func (x *ChartTimeSeriesRequest) GetFillMissing() bool {
	if x != nil {
		return x.FillMissing
	}
	return false
}

type PropertyAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property string                              `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Type     PropertyAggregation_AggregationType `protobuf:"varint,2,opt,name=type,proto3,enum=kubex.keystone.PropertyAggregation_AggregationType" json:"type,omitempty"`
	Alias    string                              `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *PropertyAggregation) Reset() {
	*x = PropertyAggregation{}
	mi := &file_keystone_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertyAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyAggregation) ProtoMessage() {}

func (x *PropertyAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyAggregation.ProtoReflect.Descriptor instead.
func (*PropertyAggregation) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{64}
}

func (x *PropertyAggregation) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyAggregation) GetType() PropertyAggregation_AggregationType {
	if x != nil {
		return x.Type
	}
	return PropertyAggregation_None
}

func (x *PropertyAggregation) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type ChartTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series map[string]*ChartTimeSeriesResponse_ChartSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChartTimeSeriesResponse) Reset() {
	*x = ChartTimeSeriesResponse{}
	mi := &file_keystone_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTimeSeriesResponse) ProtoMessage() {}

func (x *ChartTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*ChartTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{65}
}

func (x *ChartTimeSeriesResponse) GetSeries() map[string]*ChartTimeSeriesResponse_ChartSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

type ShareViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization         *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId              string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ShareWith             *VendorApp     `protobuf:"bytes,3,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
	Comment               string         `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	AllWorkspaces         bool           `protobuf:"varint,5,opt,name=all_workspaces,json=allWorkspaces,proto3" json:"all_workspaces,omitempty"` // Allow access on all workspaces
	EntityType            string         `protobuf:"bytes,6,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`           // Allow all entities, but for a specific type
	AllowProperties       []string       `protobuf:"bytes,7,rep,name=allow_properties,json=allowProperties,proto3" json:"allow_properties,omitempty"`
	AllowPiiProperties    []string       `protobuf:"bytes,8,rep,name=allow_pii_properties,json=allowPiiProperties,proto3" json:"allow_pii_properties,omitempty"`
	AllowSecureProperties []string       `protobuf:"bytes,9,rep,name=allow_secure_properties,json=allowSecureProperties,proto3" json:"allow_secure_properties,omitempty"`
}

func (x *ShareViewRequest) Reset() {
	*x = ShareViewRequest{}
	mi := &file_keystone_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareViewRequest) ProtoMessage() {}

func (x *ShareViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareViewRequest.ProtoReflect.Descriptor instead.
func (*ShareViewRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{66}
}

func (x *ShareViewRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ShareViewRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ShareViewRequest) GetShareWith() *VendorApp {
	if x != nil {
		return x.ShareWith
	}
	return nil
}

func (x *ShareViewRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ShareViewRequest) GetAllWorkspaces() bool {
	if x != nil {
		return x.AllWorkspaces
	}
	return false
}

func (x *ShareViewRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ShareViewRequest) GetAllowProperties() []string {
	if x != nil {
		return x.AllowProperties
	}
	return nil
}

func (x *ShareViewRequest) GetAllowPiiProperties() []string {
	if x != nil {
		return x.AllowPiiProperties
	}
	return nil
}

func (x *ShareViewRequest) GetAllowSecureProperties() []string {
	if x != nil {
		return x.AllowSecureProperties
	}
	return nil
}

type SharedViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success               bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Token                 string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	SharedViewToken       string     `protobuf:"bytes,3,opt,name=shared_view_token,json=sharedViewToken,proto3" json:"shared_view_token,omitempty"` // Only available on creation | to be used when access is provided to a non keystone app
	ShareWith             *VendorApp `protobuf:"bytes,4,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
	Comment               string     `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	EntityId              string     `protobuf:"bytes,6,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AllWorkspaces         bool       `protobuf:"varint,7,opt,name=all_workspaces,json=allWorkspaces,proto3" json:"all_workspaces,omitempty"` // Allow access on all workspaces
	EntityType            string     `protobuf:"bytes,8,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`           // Allow all entities, but for a specific type
	AllowProperties       []string   `protobuf:"bytes,9,rep,name=allow_properties,json=allowProperties,proto3" json:"allow_properties,omitempty"`
	AllowPiiProperties    []string   `protobuf:"bytes,10,rep,name=allow_pii_properties,json=allowPiiProperties,proto3" json:"allow_pii_properties,omitempty"`
	AllowSecureProperties []string   `protobuf:"bytes,11,rep,name=allow_secure_properties,json=allowSecureProperties,proto3" json:"allow_secure_properties,omitempty"`
}

func (x *SharedViewResponse) Reset() {
	*x = SharedViewResponse{}
	mi := &file_keystone_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedViewResponse) ProtoMessage() {}

func (x *SharedViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedViewResponse.ProtoReflect.Descriptor instead.
func (*SharedViewResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{67}
}

func (x *SharedViewResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SharedViewResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SharedViewResponse) GetSharedViewToken() string {
	if x != nil {
		return x.SharedViewToken
	}
	return ""
}

func (x *SharedViewResponse) GetShareWith() *VendorApp {
	if x != nil {
		return x.ShareWith
	}
	return nil
}

func (x *SharedViewResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SharedViewResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *SharedViewResponse) GetAllWorkspaces() bool {
	if x != nil {
		return x.AllWorkspaces
	}
	return false
}

func (x *SharedViewResponse) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *SharedViewResponse) GetAllowProperties() []string {
	if x != nil {
		return x.AllowProperties
	}
	return nil
}

func (x *SharedViewResponse) GetAllowPiiProperties() []string {
	if x != nil {
		return x.AllowPiiProperties
	}
	return nil
}

func (x *SharedViewResponse) GetAllowSecureProperties() []string {
	if x != nil {
		return x.AllowSecureProperties
	}
	return nil
}

type SharedViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	ShareWith     *VendorApp     `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
	EntityId      string         `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityType    string         `protobuf:"bytes,4,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	AllWorkspaces bool           `protobuf:"varint,5,opt,name=all_workspaces,json=allWorkspaces,proto3" json:"all_workspaces,omitempty"`
}

func (x *SharedViewsRequest) Reset() {
	*x = SharedViewsRequest{}
	mi := &file_keystone_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedViewsRequest) ProtoMessage() {}

func (x *SharedViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedViewsRequest.ProtoReflect.Descriptor instead.
func (*SharedViewsRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{68}
}

func (x *SharedViewsRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *SharedViewsRequest) GetShareWith() *VendorApp {
	if x != nil {
		return x.ShareWith
	}
	return nil
}

func (x *SharedViewsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *SharedViewsRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *SharedViewsRequest) GetAllWorkspaces() bool {
	if x != nil {
		return x.AllWorkspaces
	}
	return false
}

type SharedViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Views []*SharedViewResponse `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *SharedViewsResponse) Reset() {
	*x = SharedViewsResponse{}
	mi := &file_keystone_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedViewsResponse) ProtoMessage() {}

func (x *SharedViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedViewsResponse.ProtoReflect.Descriptor instead.
func (*SharedViewsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{69}
}

func (x *SharedViewsResponse) GetViews() []*SharedViewResponse {
	if x != nil {
		return x.Views
	}
	return nil
}

type RateLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization   *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Key             string         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TransactionId   string         `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	HardLimit       int32          `protobuf:"varint,4,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`       // Do not write transaction if over this limit
	RateMinutes     int32          `protobuf:"varint,5,opt,name=rate_minutes,json=rateMinutes,proto3" json:"rate_minutes,omitempty"` // Number of minutes the limit covers
	StoreHistorical bool           `protobuf:"varint,6,opt,name=store_historical,json=storeHistorical,proto3" json:"store_historical,omitempty"`
	ReadDistinct    bool           `protobuf:"varint,7,opt,name=read_distinct,json=readDistinct,proto3" json:"read_distinct,omitempty"`
}

func (x *RateLimitRequest) Reset() {
	*x = RateLimitRequest{}
	mi := &file_keystone_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitRequest) ProtoMessage() {}

func (x *RateLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitRequest.ProtoReflect.Descriptor instead.
func (*RateLimitRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{70}
}

func (x *RateLimitRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *RateLimitRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RateLimitRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RateLimitRequest) GetHardLimit() int32 {
	if x != nil {
		return x.HardLimit
	}
	return 0
}

func (x *RateLimitRequest) GetRateMinutes() int32 {
	if x != nil {
		return x.RateMinutes
	}
	return 0
}

func (x *RateLimitRequest) GetStoreHistorical() bool {
	if x != nil {
		return x.StoreHistorical
	}
	return false
}

func (x *RateLimitRequest) GetReadDistinct() bool {
	if x != nil {
		return x.ReadDistinct
	}
	return false
}

type RateLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCount int32 `protobuf:"varint,1,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
	OverLimit    bool  `protobuf:"varint,2,opt,name=over_limit,json=overLimit,proto3" json:"over_limit,omitempty"` // Transaction not written if this is true
}

func (x *RateLimitResponse) Reset() {
	*x = RateLimitResponse{}
	mi := &file_keystone_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitResponse) ProtoMessage() {}

func (x *RateLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitResponse.ProtoReflect.Descriptor instead.
func (*RateLimitResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{71}
}

func (x *RateLimitResponse) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *RateLimitResponse) GetOverLimit() bool {
	if x != nil {
		return x.OverLimit
	}
	return false
}

type LookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Lookup        string         `protobuf:"bytes,2,opt,name=lookup,proto3" json:"lookup,omitempty"`
	SchemeId      string         `protobuf:"bytes,3,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	Property      *string        `protobuf:"bytes,4,opt,name=property,proto3,oneof" json:"property,omitempty"`
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	mi := &file_keystone_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{72}
}

func (x *LookupRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *LookupRequest) GetLookup() string {
	if x != nil {
		return x.Lookup
	}
	return ""
}

func (x *LookupRequest) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *LookupRequest) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

type LookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*EntityReference `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *LookupResponse) Reset() {
	*x = LookupResponse{}
	mi := &file_keystone_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResponse) ProtoMessage() {}

func (x *LookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResponse.ProtoReflect.Descriptor instead.
func (*LookupResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{73}
}

func (x *LookupResponse) GetResults() []*EntityReference {
	if x != nil {
		return x.Results
	}
	return nil
}

type EntityReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SchemeId string `protobuf:"bytes,2,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	Property string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EntityReference) Reset() {
	*x = EntityReference{}
	mi := &file_keystone_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityReference) ProtoMessage() {}

func (x *EntityReference) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityReference.ProtoReflect.Descriptor instead.
func (*EntityReference) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{74}
}

func (x *EntityReference) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityReference) GetSchemeId() string {
	if x != nil {
		return x.SchemeId
	}
	return ""
}

func (x *EntityReference) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *EntityReference) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AKVPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Properties    []*AKVProperty `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AKVPutRequest) Reset() {
	*x = AKVPutRequest{}
	mi := &file_keystone_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKVPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKVPutRequest) ProtoMessage() {}

func (x *AKVPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKVPutRequest.ProtoReflect.Descriptor instead.
func (*AKVPutRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{75}
}

func (x *AKVPutRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *AKVPutRequest) GetProperties() []*AKVProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AKVGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Properties    []string       `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AKVGetRequest) Reset() {
	*x = AKVGetRequest{}
	mi := &file_keystone_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKVGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKVGetRequest) ProtoMessage() {}

func (x *AKVGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKVGetRequest.ProtoReflect.Descriptor instead.
func (*AKVGetRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{76}
}

func (x *AKVGetRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *AKVGetRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AKVGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary    *GenericResponse  `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Properties map[string]*Value `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AKVGetResponse) Reset() {
	*x = AKVGetResponse{}
	mi := &file_keystone_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKVGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKVGetResponse) ProtoMessage() {}

func (x *AKVGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKVGetResponse.ProtoReflect.Descriptor instead.
func (*AKVGetResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{77}
}

func (x *AKVGetResponse) GetSummary() *GenericResponse {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *AKVGetResponse) GetProperties() map[string]*Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AKVDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Properties    []string       `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AKVDelRequest) Reset() {
	*x = AKVDelRequest{}
	mi := &file_keystone_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKVDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKVDelRequest) ProtoMessage() {}

func (x *AKVDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKVDelRequest.ProtoReflect.Descriptor instead.
func (*AKVDelRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{78}
}

func (x *AKVDelRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *AKVDelRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AKVProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property *Property `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Value    *Value    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AKVProperty) Reset() {
	*x = AKVProperty{}
	mi := &file_keystone_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKVProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKVProperty) ProtoMessage() {}

func (x *AKVProperty) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKVProperty.ProtoReflect.Descriptor instead.
func (*AKVProperty) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{79}
}

func (x *AKVProperty) GetProperty() *Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *AKVProperty) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type IIDCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Eid           string            `protobuf:"bytes,2,opt,name=eid,proto3" json:"eid,omitempty"`
	Incr          map[string]bool   `protobuf:"bytes,3,rep,name=incr,proto3" json:"incr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // set to 0 to report key
	Meta          map[string]string `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IIDCreateRequest) Reset() {
	*x = IIDCreateRequest{}
	mi := &file_keystone_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IIDCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IIDCreateRequest) ProtoMessage() {}

func (x *IIDCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IIDCreateRequest.ProtoReflect.Descriptor instead.
func (*IIDCreateRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{80}
}

func (x *IIDCreateRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *IIDCreateRequest) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *IIDCreateRequest) GetIncr() map[string]bool {
	if x != nil {
		return x.Incr
	}
	return nil
}

func (x *IIDCreateRequest) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type IIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Iid           string         `protobuf:"bytes,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Eid           string         `protobuf:"bytes,3,opt,name=eid,proto3" json:"eid,omitempty"`
}

func (x *IIDRequest) Reset() {
	*x = IIDRequest{}
	mi := &file_keystone_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IIDRequest) ProtoMessage() {}

func (x *IIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IIDRequest.ProtoReflect.Descriptor instead.
func (*IIDRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{81}
}

func (x *IIDRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *IIDRequest) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IIDRequest) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

type IIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iids []*IIDResponse `protobuf:"bytes,1,rep,name=iids,proto3" json:"iids,omitempty"`
}

func (x *IIDsResponse) Reset() {
	*x = IIDsResponse{}
	mi := &file_keystone_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IIDsResponse) ProtoMessage() {}

func (x *IIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IIDsResponse.ProtoReflect.Descriptor instead.
func (*IIDsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{82}
}

func (x *IIDsResponse) GetIids() []*IIDResponse {
	if x != nil {
		return x.Iids
	}
	return nil
}

type IIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid    string            `protobuf:"bytes,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Eid    string            `protobuf:"bytes,2,opt,name=eid,proto3" json:"eid,omitempty"`
	Counts map[string]int64  `protobuf:"bytes,3,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Meta   map[string]string `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IIDResponse) Reset() {
	*x = IIDResponse{}
	mi := &file_keystone_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IIDResponse) ProtoMessage() {}

func (x *IIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IIDResponse.ProtoReflect.Descriptor instead.
func (*IIDResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{83}
}

func (x *IIDResponse) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IIDResponse) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *IIDResponse) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *IIDResponse) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type EventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	StreamName    string         `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	AllWorkspaces bool           `protobuf:"varint,3,opt,name=all_workspaces,json=allWorkspaces,proto3" json:"all_workspaces,omitempty"`
	Eid           string         `protobuf:"bytes,4,opt,name=eid,proto3" json:"eid,omitempty"`
	EventType     *Key           `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3,oneof" json:"event_type,omitempty"`
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	mi := &file_keystone_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{84}
}

func (x *EventStreamRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *EventStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *EventStreamRequest) GetAllWorkspaces() bool {
	if x != nil {
		return x.AllWorkspaces
	}
	return false
}

func (x *EventStreamRequest) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *EventStreamRequest) GetEventType() *Key {
	if x != nil {
		return x.EventType
	}
	return nil
}

type EventStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ws    string       `protobuf:"bytes,1,opt,name=ws,proto3" json:"ws,omitempty"`
	Eid   string       `protobuf:"bytes,2,opt,name=eid,proto3" json:"eid,omitempty"`
	Event *EntityEvent `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventStreamResponse) Reset() {
	*x = EventStreamResponse{}
	mi := &file_keystone_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamResponse) ProtoMessage() {}

func (x *EventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamResponse.ProtoReflect.Descriptor instead.
func (*EventStreamResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{85}
}

func (x *EventStreamResponse) GetWs() string {
	if x != nil {
		return x.Ws
	}
	return ""
}

func (x *EventStreamResponse) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *EventStreamResponse) GetEvent() *EntityEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type PushTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	TaskName      string            `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskId        string            `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Data          map[string]string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PushTaskRequest) Reset() {
	*x = PushTaskRequest{}
	mi := &file_keystone_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTaskRequest) ProtoMessage() {}

func (x *PushTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTaskRequest.ProtoReflect.Descriptor instead.
func (*PushTaskRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{86}
}

func (x *PushTaskRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *PushTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *PushTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PushTaskRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires Auth Context
	// Requires task name in context
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Acked  bool   `protobuf:"varint,2,opt,name=acked,proto3" json:"acked,omitempty"` // (N)Ack the provided task ID
}

func (x *TaskAckRequest) Reset() {
	*x = TaskAckRequest{}
	mi := &file_keystone_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAckRequest) ProtoMessage() {}

func (x *TaskAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAckRequest.ProtoReflect.Descriptor instead.
func (*TaskAckRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{87}
}

func (x *TaskAckRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAckRequest) GetAcked() bool {
	if x != nil {
		return x.Acked
	}
	return false
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ws     string            `protobuf:"bytes,1,opt,name=ws,proto3" json:"ws,omitempty"`
	TaskId string            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Data   map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_keystone_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{88}
}

func (x *TaskResponse) GetWs() string {
	if x != nil {
		return x.Ws
	}
	return ""
}

func (x *TaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type DestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Eid           string         `protobuf:"bytes,3,opt,name=eid,proto3" json:"eid,omitempty"`
	Reason        string         `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DestroyRequest) Reset() {
	*x = DestroyRequest{}
	mi := &file_keystone_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRequest) ProtoMessage() {}

func (x *DestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRequest.ProtoReflect.Descriptor instead.
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{89}
}

func (x *DestroyRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *DestroyRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DestroyRequest) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *DestroyRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DestroyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destroyed bool `protobuf:"varint,1,opt,name=destroyed,proto3" json:"destroyed,omitempty"`
}

func (x *DestroyResponse) Reset() {
	*x = DestroyResponse{}
	mi := &file_keystone_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyResponse) ProtoMessage() {}

func (x *DestroyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyResponse.ProtoReflect.Descriptor instead.
func (*DestroyResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{90}
}

func (x *DestroyResponse) GetDestroyed() bool {
	if x != nil {
		return x.Destroyed
	}
	return false
}

type GroupCountResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Properties map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count      int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GroupCountResponse_Result) Reset() {
	*x = GroupCountResponse_Result{}
	mi := &file_keystone_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCountResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCountResponse_Result) ProtoMessage() {}

func (x *GroupCountResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCountResponse_Result.ProtoReflect.Descriptor instead.
func (*GroupCountResponse_Result) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{56, 0}
}

func (x *GroupCountResponse_Result) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GroupCountResponse_Result) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GroupCountResponse_Result) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChartTimeSeriesResponse_ChartSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Series string                 `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
	Values map[string]float64     `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *ChartTimeSeriesResponse_ChartSeries) Reset() {
	*x = ChartTimeSeriesResponse_ChartSeries{}
	mi := &file_keystone_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTimeSeriesResponse_ChartSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTimeSeriesResponse_ChartSeries) ProtoMessage() {}

func (x *ChartTimeSeriesResponse_ChartSeries) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTimeSeriesResponse_ChartSeries.ProtoReflect.Descriptor instead.
func (*ChartTimeSeriesResponse_ChartSeries) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{65, 1}
}

func (x *ChartTimeSeriesResponse_ChartSeries) GetBucket() *timestamppb.Timestamp {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *ChartTimeSeriesResponse_ChartSeries) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *ChartTimeSeriesResponse_ChartSeries) GetValues() map[string]float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_keystone_proto protoreflect.FileDescriptor

var file_keystone_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x3f, 0x0a, 0x09, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x22, 0xec, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xdb, 0x04, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x72,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x07, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6b, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x49, 0x44, 0x10, 0x05, 0x22, 0x22, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x01, 0x22, 0x8a,
	0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e,
	0x74, 0x73, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x10, 0x0b,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x10, 0x0c, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x10, 0x11, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x0a, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x10, 0x10, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x0a, 0x22, 0x4a, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf3, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x22, 0xd5, 0x02,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x48, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x50, 0x69, 0x69, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x28,
	0x0a, 0x10, 0x50, 0x69, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x50, 0x69, 0x69,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x73, 0x0a, 0x14, 0x50, 0x69, 0x69, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0xa6, 0x02, 0x0a,
	0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x54, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x03, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x74, 0x6c,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x74, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a,
	0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x37, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x37, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x02, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc7, 0x05, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x56, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0xcc, 0x09, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x33,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x14,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x36, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x69, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x69, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x69, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0c,
	0x70, 0x69, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x1b,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xb6,
	0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x10, 0x02, 0x22, 0x98, 0x02, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x05, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x45, 0x0a,
	0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x61, 0x76, 0x67, 0x22, 0xc2, 0x03, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x49, 0x44, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xdf, 0x06, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x08, 0x49, 0x44, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x49, 0x0a, 0x0c, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x69, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x3d, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x45, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x12, 0x37, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x0b, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xca, 0x01,
	0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x0b, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xc0, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01,
	0x22, 0xc2, 0x02, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0xca, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x59, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4e, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x22, 0xc9, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xda, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3d,
	0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02,
	0x0a, 0x12, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84,
	0x04, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x4e, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x10, 0x05, 0x22, 0xc6, 0x03, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x6e, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xed, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa5, 0x03, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x69, 0x69, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xbe, 0x03, 0x0a, 0x12, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x69, 0x69, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x22, 0x57, 0x0a, 0x11, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x4b,
	0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x0f, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x41,
	0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x4b, 0x56, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x74,
	0x0a, 0x0d, 0x41, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x41, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x0d, 0x41, 0x4b, 0x56, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x70,
	0x0a, 0x0b, 0x41, 0x4b, 0x56, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xdb, 0x02, 0x0a, 0x10, 0x49, 0x49, 0x44, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04,
	0x69, 0x6e, 0x63, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x12, 0x3e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x49, 0x6e, 0x63, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75,
	0x0a, 0x0a, 0x49, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0c, 0x49, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x69, 0x69, 0x64, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x49, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x77, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0e, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x77, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x0f, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x2a, 0x5b, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x08, 0x2a, 0x4d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0x04, 0x2a, 0xe7, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61,
	0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x6e, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x0e, 0x32, 0xb7, 0x12, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x03, 0x49, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x49, 0x49,
	0x44, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x50, 0x69, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x50, 0x69, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x69, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x50, 0x69, 0x69, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x69, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x69, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x03, 0x4c, 0x6f,
	0x67, 0x12, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x1d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x55, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x06, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x53, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x20, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x27, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x41, 0x4b, 0x56, 0x47, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x41, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x41, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x41, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x4b,
	0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x06, 0x41, 0x4b, 0x56, 0x44, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x4b, 0x56, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x2e, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keystone_proto_rawDescOnce sync.Once
	file_keystone_proto_rawDescData = file_keystone_proto_rawDesc
)

func file_keystone_proto_rawDescGZIP() []byte {
	file_keystone_proto_rawDescOnce.Do(func() {
		file_keystone_proto_rawDescData = protoimpl.X.CompressGZIP(file_keystone_proto_rawDescData)
	})
	return file_keystone_proto_rawDescData
}

var file_keystone_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_keystone_proto_msgTypes = make([]protoimpl.MessageInfo, 116)
var file_keystone_proto_goTypes = []any{
	(EntityState)(0),                         // 0: kubex.keystone.EntityState
	(LogLevel)(0),                            // 1: kubex.keystone.LogLevel
	(ObjectType)(0),                          // 2: kubex.keystone.ObjectType
	(Operator)(0),                            // 3: kubex.keystone.Operator
	(Schema_Option)(0),                       // 4: kubex.keystone.Schema.Option
	(Schema_Type)(0),                         // 5: kubex.keystone.Schema.Type
	(Property_Type)(0),                       // 6: kubex.keystone.Property.Type
	(Property_ExtendedType)(0),               // 7: kubex.keystone.Property.ExtendedType
	(Property_Option)(0),                     // 8: kubex.keystone.Property.Option
	(MutateRequest_MutateOption)(0),          // 9: kubex.keystone.MutateRequest.MutateOption
	(PropertyAggregation_AggregationType)(0), // 10: kubex.keystone.PropertyAggregation.AggregationType
	(*ExtendedResponse)(nil),                 // 11: kubex.keystone.ExtendedResponse
	(*VendorApp)(nil),                        // 12: kubex.keystone.VendorApp
	(*Authorization)(nil),                    // 13: kubex.keystone.Authorization
	(*GenericResponse)(nil),                  // 14: kubex.keystone.GenericResponse
	(*Schema)(nil),                           // 15: kubex.keystone.Schema
	(*Property)(nil),                         // 16: kubex.keystone.Property
	(*Key)(nil),                              // 17: kubex.keystone.Key
	(*Value)(nil),                            // 18: kubex.keystone.Value
	(*RepeatedValue)(nil),                    // 19: kubex.keystone.RepeatedValue
	(*PiiTokenRequest)(nil),                  // 20: kubex.keystone.PiiTokenRequest
	(*PiiTokenResponse)(nil),                 // 21: kubex.keystone.PiiTokenResponse
	(*PiiAnonymizeRequest)(nil),              // 22: kubex.keystone.PiiAnonymizeRequest
	(*PiiAnonymizeResponse)(nil),             // 23: kubex.keystone.PiiAnonymizeResponse
	(*Entity)(nil),                           // 24: kubex.keystone.Entity
	(*EntityProperty)(nil),                   // 25: kubex.keystone.EntityProperty
	(*EntityChild)(nil),                      // 26: kubex.keystone.EntityChild
	(*EntityDatum)(nil),                      // 27: kubex.keystone.EntityDatum
	(*EntityLog)(nil),                        // 28: kubex.keystone.EntityLog
	(*EntityEvent)(nil),                      // 29: kubex.keystone.EntityEvent
	(*EntityRelationship)(nil),               // 30: kubex.keystone.EntityRelationship
	(*EntityLabel)(nil),                      // 31: kubex.keystone.EntityLabel
	(*EntitySensorMeasurement)(nil),          // 32: kubex.keystone.EntitySensorMeasurement
	(*EntityObject)(nil),                     // 33: kubex.keystone.EntityObject
	(*User)(nil),                             // 34: kubex.keystone.User
	(*Mutation)(nil),                         // 35: kubex.keystone.Mutation
	(*LogRequest)(nil),                       // 36: kubex.keystone.LogRequest
	(*LogResponse)(nil),                      // 37: kubex.keystone.LogResponse
	(*Window)(nil),                           // 38: kubex.keystone.Window
	(*PropertyFilter)(nil),                   // 39: kubex.keystone.PropertyFilter
	(*PropertySort)(nil),                     // 40: kubex.keystone.PropertySort
	(*SchemaRequest)(nil),                    // 41: kubex.keystone.SchemaRequest
	(*MutateRequest)(nil),                    // 42: kubex.keystone.MutateRequest
	(*ReportTimeSeriesRequest)(nil),          // 43: kubex.keystone.ReportTimeSeriesRequest
	(*EntityView)(nil),                       // 44: kubex.keystone.EntityView
	(*TypeCount)(nil),                        // 45: kubex.keystone.TypeCount
	(*ChildSummary)(nil),                     // 46: kubex.keystone.ChildSummary
	(*EntityRequest)(nil),                    // 47: kubex.keystone.EntityRequest
	(*EntityResponse)(nil),                   // 48: kubex.keystone.EntityResponse
	(*EntityLock)(nil),                       // 49: kubex.keystone.EntityLock
	(*MutateResponse)(nil),                   // 50: kubex.keystone.MutateResponse
	(*IDLookup)(nil),                         // 51: kubex.keystone.IDLookup
	(*PropertyRequest)(nil),                  // 52: kubex.keystone.PropertyRequest
	(*ChildRequest)(nil),                     // 53: kubex.keystone.ChildRequest
	(*LogsRequest)(nil),                      // 54: kubex.keystone.LogsRequest
	(*LogsResponse)(nil),                     // 55: kubex.keystone.LogsResponse
	(*EventRequest)(nil),                     // 56: kubex.keystone.EventRequest
	(*EventsResponse)(nil),                   // 57: kubex.keystone.EventsResponse
	(*RelationOf)(nil),                       // 58: kubex.keystone.RelationOf
	(*FindRequest)(nil),                      // 59: kubex.keystone.FindRequest
	(*FindResponse)(nil),                     // 60: kubex.keystone.FindResponse
	(*PageRequest)(nil),                      // 61: kubex.keystone.PageRequest
	(*ListRequest)(nil),                      // 62: kubex.keystone.ListRequest
	(*ListResponse)(nil),                     // 63: kubex.keystone.ListResponse
	(*QueryIndexRequest)(nil),                // 64: kubex.keystone.QueryIndexRequest
	(*QueryIndexResponse)(nil),               // 65: kubex.keystone.QueryIndexResponse
	(*GroupCountRequest)(nil),                // 66: kubex.keystone.GroupCountRequest
	(*GroupCountResponse)(nil),               // 67: kubex.keystone.GroupCountResponse
	(*EntitiesResponse)(nil),                 // 68: kubex.keystone.EntitiesResponse
	(*Date)(nil),                             // 69: kubex.keystone.Date
	(*SchemaStatisticsRequest)(nil),          // 70: kubex.keystone.SchemaStatisticsRequest
	(*SchemaStatisticsResponse)(nil),         // 71: kubex.keystone.SchemaStatisticsResponse
	(*DailyEntityRequest)(nil),               // 72: kubex.keystone.DailyEntityRequest
	(*DailyEntityResponse)(nil),              // 73: kubex.keystone.DailyEntityResponse
	(*ChartTimeSeriesRequest)(nil),           // 74: kubex.keystone.ChartTimeSeriesRequest
	(*PropertyAggregation)(nil),              // 75: kubex.keystone.PropertyAggregation
	(*ChartTimeSeriesResponse)(nil),          // 76: kubex.keystone.ChartTimeSeriesResponse
	(*ShareViewRequest)(nil),                 // 77: kubex.keystone.ShareViewRequest
	(*SharedViewResponse)(nil),               // 78: kubex.keystone.SharedViewResponse
	(*SharedViewsRequest)(nil),               // 79: kubex.keystone.SharedViewsRequest
	(*SharedViewsResponse)(nil),              // 80: kubex.keystone.SharedViewsResponse
	(*RateLimitRequest)(nil),                 // 81: kubex.keystone.RateLimitRequest
	(*RateLimitResponse)(nil),                // 82: kubex.keystone.RateLimitResponse
	(*LookupRequest)(nil),                    // 83: kubex.keystone.LookupRequest
	(*LookupResponse)(nil),                   // 84: kubex.keystone.LookupResponse
	(*EntityReference)(nil),                  // 85: kubex.keystone.EntityReference
	(*AKVPutRequest)(nil),                    // 86: kubex.keystone.AKVPutRequest
	(*AKVGetRequest)(nil),                    // 87: kubex.keystone.AKVGetRequest
	(*AKVGetResponse)(nil),                   // 88: kubex.keystone.AKVGetResponse
	(*AKVDelRequest)(nil),                    // 89: kubex.keystone.AKVDelRequest
	(*AKVProperty)(nil),                      // 90: kubex.keystone.AKVProperty
	(*IIDCreateRequest)(nil),                 // 91: kubex.keystone.IIDCreateRequest
	(*IIDRequest)(nil),                       // 92: kubex.keystone.IIDRequest
	(*IIDsResponse)(nil),                     // 93: kubex.keystone.IIDsResponse
	(*IIDResponse)(nil),                      // 94: kubex.keystone.IIDResponse
	(*EventStreamRequest)(nil),               // 95: kubex.keystone.EventStreamRequest
	(*EventStreamResponse)(nil),              // 96: kubex.keystone.EventStreamResponse
	(*PushTaskRequest)(nil),                  // 97: kubex.keystone.PushTaskRequest
	(*TaskAckRequest)(nil),                   // 98: kubex.keystone.TaskAckRequest
	(*TaskResponse)(nil),                     // 99: kubex.keystone.TaskResponse
	(*DestroyRequest)(nil),                   // 100: kubex.keystone.DestroyRequest
	(*DestroyResponse)(nil),                  // 101: kubex.keystone.DestroyResponse
	nil,                                      // 102: kubex.keystone.RepeatedValue.KeyValueEntry
	nil,                                      // 103: kubex.keystone.RepeatedValue.MixedEntry
	nil,                                      // 104: kubex.keystone.EntityChild.DataEntry
	nil,                                      // 105: kubex.keystone.EntityChild.AppendDataEntry
	nil,                                      // 106: kubex.keystone.EntityLog.DataEntry
	nil,                                      // 107: kubex.keystone.EntityEvent.DataEntry
	nil,                                      // 108: kubex.keystone.EntityRelationship.DataEntry
	nil,                                      // 109: kubex.keystone.EntitySensorMeasurement.DataEntry
	nil,                                      // 110: kubex.keystone.EntityObject.MetadataEntry
	nil,                                      // 111: kubex.keystone.EntityObject.UploadHeadersEntry
	nil,                                      // 112: kubex.keystone.MutateResponse.CreatedChildrenEntry
	(*GroupCountResponse_Result)(nil),        // 113: kubex.keystone.GroupCountResponse.Result
	nil,                                      // 114: kubex.keystone.GroupCountResponse.Result.PropertiesEntry
	nil,                                      // 115: kubex.keystone.SchemaStatisticsResponse.DailyCountEntry
	nil,                                      // 116: kubex.keystone.DailyEntityResponse.EntitiesEntry
	nil,                                      // 117: kubex.keystone.ChartTimeSeriesResponse.SeriesEntry
	(*ChartTimeSeriesResponse_ChartSeries)(nil), // 118: kubex.keystone.ChartTimeSeriesResponse.ChartSeries
	nil,                           // 119: kubex.keystone.ChartTimeSeriesResponse.ChartSeries.ValuesEntry
	nil,                           // 120: kubex.keystone.AKVGetResponse.PropertiesEntry
	nil,                           // 121: kubex.keystone.IIDCreateRequest.IncrEntry
	nil,                           // 122: kubex.keystone.IIDCreateRequest.MetaEntry
	nil,                           // 123: kubex.keystone.IIDResponse.CountsEntry
	nil,                           // 124: kubex.keystone.IIDResponse.MetaEntry
	nil,                           // 125: kubex.keystone.PushTaskRequest.DataEntry
	nil,                           // 126: kubex.keystone.TaskResponse.DataEntry
	(*timestamppb.Timestamp)(nil), // 127: google.protobuf.Timestamp
}
var file_keystone_proto_depIdxs = []int32{
	12,  // 0: kubex.keystone.Authorization.source:type_name -> kubex.keystone.VendorApp
	34,  // 1: kubex.keystone.Authorization.user:type_name -> kubex.keystone.User
	12,  // 2: kubex.keystone.Schema.source:type_name -> kubex.keystone.VendorApp
	127, // 3: kubex.keystone.Schema.created:type_name -> google.protobuf.Timestamp
	16,  // 4: kubex.keystone.Schema.properties:type_name -> kubex.keystone.Property
	4,   // 5: kubex.keystone.Schema.options:type_name -> kubex.keystone.Schema.Option
	5,   // 6: kubex.keystone.Schema.ks_type:type_name -> kubex.keystone.Schema.Type
	6,   // 7: kubex.keystone.Property.data_type:type_name -> kubex.keystone.Property.Type
	7,   // 8: kubex.keystone.Property.extended_type:type_name -> kubex.keystone.Property.ExtendedType
	8,   // 9: kubex.keystone.Property.options:type_name -> kubex.keystone.Property.Option
	12,  // 10: kubex.keystone.Key.source:type_name -> kubex.keystone.VendorApp
	127, // 11: kubex.keystone.Value.time:type_name -> google.protobuf.Timestamp
	19,  // 12: kubex.keystone.Value.array:type_name -> kubex.keystone.RepeatedValue
	19,  // 13: kubex.keystone.Value.array_append:type_name -> kubex.keystone.RepeatedValue
	19,  // 14: kubex.keystone.Value.array_reduce:type_name -> kubex.keystone.RepeatedValue
	102, // 15: kubex.keystone.RepeatedValue.key_value:type_name -> kubex.keystone.RepeatedValue.KeyValueEntry
	103, // 16: kubex.keystone.RepeatedValue.mixed:type_name -> kubex.keystone.RepeatedValue.MixedEntry
	13,  // 17: kubex.keystone.PiiTokenRequest.authorization:type_name -> kubex.keystone.Authorization
	127, // 18: kubex.keystone.PiiTokenRequest.auto_expire:type_name -> google.protobuf.Timestamp
	13,  // 19: kubex.keystone.PiiAnonymizeRequest.authorization:type_name -> kubex.keystone.Authorization
	127, // 20: kubex.keystone.PiiAnonymizeResponse.recovery_until:type_name -> google.protobuf.Timestamp
	127, // 21: kubex.keystone.Entity.created:type_name -> google.protobuf.Timestamp
	127, // 22: kubex.keystone.Entity.state_change:type_name -> google.protobuf.Timestamp
	0,   // 23: kubex.keystone.Entity.state:type_name -> kubex.keystone.EntityState
	127, // 24: kubex.keystone.Entity.lastUpdate:type_name -> google.protobuf.Timestamp
	18,  // 25: kubex.keystone.EntityProperty.value:type_name -> kubex.keystone.Value
	12,  // 26: kubex.keystone.EntityProperty.source:type_name -> kubex.keystone.VendorApp
	17,  // 27: kubex.keystone.EntityChild.type:type_name -> kubex.keystone.Key
	104, // 28: kubex.keystone.EntityChild.data:type_name -> kubex.keystone.EntityChild.DataEntry
	105, // 29: kubex.keystone.EntityChild.append_data:type_name -> kubex.keystone.EntityChild.AppendDataEntry
	12,  // 30: kubex.keystone.EntityDatum.source:type_name -> kubex.keystone.VendorApp
	1,   // 31: kubex.keystone.EntityLog.level:type_name -> kubex.keystone.LogLevel
	127, // 32: kubex.keystone.EntityLog.time:type_name -> google.protobuf.Timestamp
	106, // 33: kubex.keystone.EntityLog.data:type_name -> kubex.keystone.EntityLog.DataEntry
	34,  // 34: kubex.keystone.EntityLog.audit_user:type_name -> kubex.keystone.User
	17,  // 35: kubex.keystone.EntityEvent.type:type_name -> kubex.keystone.Key
	127, // 36: kubex.keystone.EntityEvent.time:type_name -> google.protobuf.Timestamp
	107, // 37: kubex.keystone.EntityEvent.data:type_name -> kubex.keystone.EntityEvent.DataEntry
	17,  // 38: kubex.keystone.EntityRelationship.relationship:type_name -> kubex.keystone.Key
	127, // 39: kubex.keystone.EntityRelationship.since:type_name -> google.protobuf.Timestamp
	108, // 40: kubex.keystone.EntityRelationship.data:type_name -> kubex.keystone.EntityRelationship.DataEntry
	127, // 41: kubex.keystone.EntitySensorMeasurement.at:type_name -> google.protobuf.Timestamp
	109, // 42: kubex.keystone.EntitySensorMeasurement.data:type_name -> kubex.keystone.EntitySensorMeasurement.DataEntry
	2,   // 43: kubex.keystone.EntityObject.type:type_name -> kubex.keystone.ObjectType
	127, // 44: kubex.keystone.EntityObject.expiry:type_name -> google.protobuf.Timestamp
	110, // 45: kubex.keystone.EntityObject.metadata:type_name -> kubex.keystone.EntityObject.MetadataEntry
	111, // 46: kubex.keystone.EntityObject.upload_headers:type_name -> kubex.keystone.EntityObject.UploadHeadersEntry
	12,  // 47: kubex.keystone.User.source:type_name -> kubex.keystone.VendorApp
	34,  // 48: kubex.keystone.User.parent:type_name -> kubex.keystone.User
	34,  // 49: kubex.keystone.Mutation.mutator:type_name -> kubex.keystone.User
	127, // 50: kubex.keystone.Mutation.timestamp:type_name -> google.protobuf.Timestamp
	0,   // 51: kubex.keystone.Mutation.state:type_name -> kubex.keystone.EntityState
	25,  // 52: kubex.keystone.Mutation.properties:type_name -> kubex.keystone.EntityProperty
	25,  // 53: kubex.keystone.Mutation.dynamic_properties:type_name -> kubex.keystone.EntityProperty
	28,  // 54: kubex.keystone.Mutation.logs:type_name -> kubex.keystone.EntityLog
	29,  // 55: kubex.keystone.Mutation.events:type_name -> kubex.keystone.EntityEvent
	26,  // 56: kubex.keystone.Mutation.children:type_name -> kubex.keystone.EntityChild
	26,  // 57: kubex.keystone.Mutation.remove_children:type_name -> kubex.keystone.EntityChild
	30,  // 58: kubex.keystone.Mutation.relationships:type_name -> kubex.keystone.EntityRelationship
	30,  // 59: kubex.keystone.Mutation.remove_relationships:type_name -> kubex.keystone.EntityRelationship
	31,  // 60: kubex.keystone.Mutation.labels:type_name -> kubex.keystone.EntityLabel
	31,  // 61: kubex.keystone.Mutation.remove_labels:type_name -> kubex.keystone.EntityLabel
	32,  // 62: kubex.keystone.Mutation.measurements:type_name -> kubex.keystone.EntitySensorMeasurement
	33,  // 63: kubex.keystone.Mutation.objects:type_name -> kubex.keystone.EntityObject
	17,  // 64: kubex.keystone.Mutation.pii_reference:type_name -> kubex.keystone.Key
	17,  // 65: kubex.keystone.Mutation.remove_all_children_by_type:type_name -> kubex.keystone.Key
	13,  // 66: kubex.keystone.LogRequest.authorization:type_name -> kubex.keystone.Authorization
	28,  // 67: kubex.keystone.LogRequest.logs:type_name -> kubex.keystone.EntityLog
	11,  // 68: kubex.keystone.LogResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	127, // 69: kubex.keystone.Window.since:type_name -> google.protobuf.Timestamp
	127, // 70: kubex.keystone.Window.until:type_name -> google.protobuf.Timestamp
	3,   // 71: kubex.keystone.PropertyFilter.operator:type_name -> kubex.keystone.Operator
	18,  // 72: kubex.keystone.PropertyFilter.values:type_name -> kubex.keystone.Value
	39,  // 73: kubex.keystone.PropertyFilter.nested:type_name -> kubex.keystone.PropertyFilter
	13,  // 74: kubex.keystone.SchemaRequest.authorization:type_name -> kubex.keystone.Authorization
	15,  // 75: kubex.keystone.SchemaRequest.schema:type_name -> kubex.keystone.Schema
	44,  // 76: kubex.keystone.SchemaRequest.views:type_name -> kubex.keystone.EntityView
	13,  // 77: kubex.keystone.MutateRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 78: kubex.keystone.MutateRequest.schema:type_name -> kubex.keystone.Key
	35,  // 79: kubex.keystone.MutateRequest.mutation:type_name -> kubex.keystone.Mutation
	9,   // 80: kubex.keystone.MutateRequest.options:type_name -> kubex.keystone.MutateRequest.MutateOption
	39,  // 81: kubex.keystone.MutateRequest.where:type_name -> kubex.keystone.PropertyFilter
	13,  // 82: kubex.keystone.ReportTimeSeriesRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 83: kubex.keystone.ReportTimeSeriesRequest.schema:type_name -> kubex.keystone.Key
	35,  // 84: kubex.keystone.ReportTimeSeriesRequest.mutation:type_name -> kubex.keystone.Mutation
	127, // 85: kubex.keystone.ReportTimeSeriesRequest.timestamp:type_name -> google.protobuf.Timestamp
	52,  // 86: kubex.keystone.EntityView.properties:type_name -> kubex.keystone.PropertyRequest
	53,  // 87: kubex.keystone.EntityView.children:type_name -> kubex.keystone.ChildRequest
	17,  // 88: kubex.keystone.EntityView.relationship_by_type:type_name -> kubex.keystone.Key
	17,  // 89: kubex.keystone.EntityView.descendant_count_type:type_name -> kubex.keystone.Key
	17,  // 90: kubex.keystone.EntityView.relationship_count_type:type_name -> kubex.keystone.Key
	17,  // 91: kubex.keystone.TypeCount.type:type_name -> kubex.keystone.Key
	17,  // 92: kubex.keystone.ChildSummary.type:type_name -> kubex.keystone.Key
	13,  // 93: kubex.keystone.EntityRequest.authorization:type_name -> kubex.keystone.Authorization
	51,  // 94: kubex.keystone.EntityRequest.unique_id:type_name -> kubex.keystone.IDLookup
	44,  // 95: kubex.keystone.EntityRequest.view:type_name -> kubex.keystone.EntityView
	17,  // 96: kubex.keystone.EntityRequest.schema:type_name -> kubex.keystone.Key
	25,  // 97: kubex.keystone.EntityRequest.verify_properties:type_name -> kubex.keystone.EntityProperty
	24,  // 98: kubex.keystone.EntityResponse.entity:type_name -> kubex.keystone.Entity
	25,  // 99: kubex.keystone.EntityResponse.properties:type_name -> kubex.keystone.EntityProperty
	26,  // 100: kubex.keystone.EntityResponse.children:type_name -> kubex.keystone.EntityChild
	27,  // 101: kubex.keystone.EntityResponse.datum:type_name -> kubex.keystone.EntityDatum
	30,  // 102: kubex.keystone.EntityResponse.relationships:type_name -> kubex.keystone.EntityRelationship
	31,  // 103: kubex.keystone.EntityResponse.labels:type_name -> kubex.keystone.EntityLabel
	45,  // 104: kubex.keystone.EntityResponse.relationship_counts:type_name -> kubex.keystone.TypeCount
	45,  // 105: kubex.keystone.EntityResponse.descendant_counts:type_name -> kubex.keystone.TypeCount
	46,  // 106: kubex.keystone.EntityResponse.child_summary:type_name -> kubex.keystone.ChildSummary
	33,  // 107: kubex.keystone.EntityResponse.objects:type_name -> kubex.keystone.EntityObject
	25,  // 108: kubex.keystone.EntityResponse.dynamic_properties:type_name -> kubex.keystone.EntityProperty
	49,  // 109: kubex.keystone.EntityResponse.lock:type_name -> kubex.keystone.EntityLock
	11,  // 110: kubex.keystone.EntityResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	127, // 111: kubex.keystone.EntityLock.locked_until:type_name -> google.protobuf.Timestamp
	11,  // 112: kubex.keystone.MutateResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	33,  // 113: kubex.keystone.MutateResponse.signed_object_urls:type_name -> kubex.keystone.EntityObject
	112, // 114: kubex.keystone.MutateResponse.created_children:type_name -> kubex.keystone.MutateResponse.CreatedChildrenEntry
	12,  // 115: kubex.keystone.PropertyRequest.source:type_name -> kubex.keystone.VendorApp
	17,  // 116: kubex.keystone.ChildRequest.type:type_name -> kubex.keystone.Key
	13,  // 117: kubex.keystone.LogsRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 118: kubex.keystone.LogsRequest.type:type_name -> kubex.keystone.Key
	1,   // 119: kubex.keystone.LogsRequest.levels:type_name -> kubex.keystone.LogLevel
	1,   // 120: kubex.keystone.LogsRequest.min_level:type_name -> kubex.keystone.LogLevel
	38,  // 121: kubex.keystone.LogsRequest.window:type_name -> kubex.keystone.Window
	28,  // 122: kubex.keystone.LogsResponse.logs:type_name -> kubex.keystone.EntityLog
	13,  // 123: kubex.keystone.EventRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 124: kubex.keystone.EventRequest.event_by_type:type_name -> kubex.keystone.Key
	38,  // 125: kubex.keystone.EventRequest.events_in_window:type_name -> kubex.keystone.Window
	29,  // 126: kubex.keystone.EventsResponse.events:type_name -> kubex.keystone.EntityEvent
	17,  // 127: kubex.keystone.RelationOf.relationship:type_name -> kubex.keystone.Key
	13,  // 128: kubex.keystone.FindRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 129: kubex.keystone.FindRequest.schema:type_name -> kubex.keystone.Key
	44,  // 130: kubex.keystone.FindRequest.view:type_name -> kubex.keystone.EntityView
	58,  // 131: kubex.keystone.FindRequest.relation_of:type_name -> kubex.keystone.RelationOf
	39,  // 132: kubex.keystone.FindRequest.property_filters:type_name -> kubex.keystone.PropertyFilter
	31,  // 133: kubex.keystone.FindRequest.label_filters:type_name -> kubex.keystone.EntityLabel
	48,  // 134: kubex.keystone.FindResponse.entities:type_name -> kubex.keystone.EntityResponse
	11,  // 135: kubex.keystone.FindResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	13,  // 136: kubex.keystone.ListRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 137: kubex.keystone.ListRequest.schema:type_name -> kubex.keystone.Key
	39,  // 138: kubex.keystone.ListRequest.filters:type_name -> kubex.keystone.PropertyFilter
	40,  // 139: kubex.keystone.ListRequest.sort:type_name -> kubex.keystone.PropertySort
	61,  // 140: kubex.keystone.ListRequest.page:type_name -> kubex.keystone.PageRequest
	48,  // 141: kubex.keystone.ListResponse.entities:type_name -> kubex.keystone.EntityResponse
	11,  // 142: kubex.keystone.ListResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	13,  // 143: kubex.keystone.QueryIndexRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 144: kubex.keystone.QueryIndexRequest.schema:type_name -> kubex.keystone.Key
	39,  // 145: kubex.keystone.QueryIndexRequest.filters:type_name -> kubex.keystone.PropertyFilter
	40,  // 146: kubex.keystone.QueryIndexRequest.sort:type_name -> kubex.keystone.PropertySort
	61,  // 147: kubex.keystone.QueryIndexRequest.page:type_name -> kubex.keystone.PageRequest
	48,  // 148: kubex.keystone.QueryIndexResponse.entities:type_name -> kubex.keystone.EntityResponse
	11,  // 149: kubex.keystone.QueryIndexResponse.extended:type_name -> kubex.keystone.ExtendedResponse
	13,  // 150: kubex.keystone.GroupCountRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 151: kubex.keystone.GroupCountRequest.schema:type_name -> kubex.keystone.Key
	39,  // 152: kubex.keystone.GroupCountRequest.filters:type_name -> kubex.keystone.PropertyFilter
	61,  // 153: kubex.keystone.GroupCountRequest.page:type_name -> kubex.keystone.PageRequest
	113, // 154: kubex.keystone.GroupCountResponse.results:type_name -> kubex.keystone.GroupCountResponse.Result
	48,  // 155: kubex.keystone.EntitiesResponse.entities:type_name -> kubex.keystone.EntityResponse
	13,  // 156: kubex.keystone.SchemaStatisticsRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 157: kubex.keystone.SchemaStatisticsRequest.schema:type_name -> kubex.keystone.Key
	69,  // 158: kubex.keystone.SchemaStatisticsRequest.created_from:type_name -> kubex.keystone.Date
	69,  // 159: kubex.keystone.SchemaStatisticsRequest.created_until:type_name -> kubex.keystone.Date
	115, // 160: kubex.keystone.SchemaStatisticsResponse.daily_count:type_name -> kubex.keystone.SchemaStatisticsResponse.DailyCountEntry
	13,  // 161: kubex.keystone.DailyEntityRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 162: kubex.keystone.DailyEntityRequest.schema:type_name -> kubex.keystone.Key
	69,  // 163: kubex.keystone.DailyEntityRequest.date:type_name -> kubex.keystone.Date
	116, // 164: kubex.keystone.DailyEntityResponse.entities:type_name -> kubex.keystone.DailyEntityResponse.EntitiesEntry
	13,  // 165: kubex.keystone.ChartTimeSeriesRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 166: kubex.keystone.ChartTimeSeriesRequest.schema:type_name -> kubex.keystone.Key
	127, // 167: kubex.keystone.ChartTimeSeriesRequest.from:type_name -> google.protobuf.Timestamp
	127, // 168: kubex.keystone.ChartTimeSeriesRequest.until:type_name -> google.protobuf.Timestamp
	75,  // 169: kubex.keystone.ChartTimeSeriesRequest.aggregations:type_name -> kubex.keystone.PropertyAggregation
	39,  // 170: kubex.keystone.ChartTimeSeriesRequest.property_filters:type_name -> kubex.keystone.PropertyFilter
	10,  // 171: kubex.keystone.PropertyAggregation.type:type_name -> kubex.keystone.PropertyAggregation.AggregationType
	117, // 172: kubex.keystone.ChartTimeSeriesResponse.series:type_name -> kubex.keystone.ChartTimeSeriesResponse.SeriesEntry
	13,  // 173: kubex.keystone.ShareViewRequest.authorization:type_name -> kubex.keystone.Authorization
	12,  // 174: kubex.keystone.ShareViewRequest.share_with:type_name -> kubex.keystone.VendorApp
	12,  // 175: kubex.keystone.SharedViewResponse.share_with:type_name -> kubex.keystone.VendorApp
	13,  // 176: kubex.keystone.SharedViewsRequest.authorization:type_name -> kubex.keystone.Authorization
	12,  // 177: kubex.keystone.SharedViewsRequest.share_with:type_name -> kubex.keystone.VendorApp
	78,  // 178: kubex.keystone.SharedViewsResponse.views:type_name -> kubex.keystone.SharedViewResponse
	13,  // 179: kubex.keystone.RateLimitRequest.authorization:type_name -> kubex.keystone.Authorization
	13,  // 180: kubex.keystone.LookupRequest.authorization:type_name -> kubex.keystone.Authorization
	85,  // 181: kubex.keystone.LookupResponse.results:type_name -> kubex.keystone.EntityReference
	13,  // 182: kubex.keystone.AKVPutRequest.authorization:type_name -> kubex.keystone.Authorization
	90,  // 183: kubex.keystone.AKVPutRequest.properties:type_name -> kubex.keystone.AKVProperty
	13,  // 184: kubex.keystone.AKVGetRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 185: kubex.keystone.AKVGetResponse.summary:type_name -> kubex.keystone.GenericResponse
	120, // 186: kubex.keystone.AKVGetResponse.properties:type_name -> kubex.keystone.AKVGetResponse.PropertiesEntry
	13,  // 187: kubex.keystone.AKVDelRequest.authorization:type_name -> kubex.keystone.Authorization
	16,  // 188: kubex.keystone.AKVProperty.property:type_name -> kubex.keystone.Property
	18,  // 189: kubex.keystone.AKVProperty.value:type_name -> kubex.keystone.Value
	13,  // 190: kubex.keystone.IIDCreateRequest.authorization:type_name -> kubex.keystone.Authorization
	121, // 191: kubex.keystone.IIDCreateRequest.incr:type_name -> kubex.keystone.IIDCreateRequest.IncrEntry
	122, // 192: kubex.keystone.IIDCreateRequest.meta:type_name -> kubex.keystone.IIDCreateRequest.MetaEntry
	13,  // 193: kubex.keystone.IIDRequest.authorization:type_name -> kubex.keystone.Authorization
	94,  // 194: kubex.keystone.IIDsResponse.iids:type_name -> kubex.keystone.IIDResponse
	123, // 195: kubex.keystone.IIDResponse.counts:type_name -> kubex.keystone.IIDResponse.CountsEntry
	124, // 196: kubex.keystone.IIDResponse.meta:type_name -> kubex.keystone.IIDResponse.MetaEntry
	13,  // 197: kubex.keystone.EventStreamRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 198: kubex.keystone.EventStreamRequest.event_type:type_name -> kubex.keystone.Key
	29,  // 199: kubex.keystone.EventStreamResponse.event:type_name -> kubex.keystone.EntityEvent
	13,  // 200: kubex.keystone.PushTaskRequest.authorization:type_name -> kubex.keystone.Authorization
	125, // 201: kubex.keystone.PushTaskRequest.data:type_name -> kubex.keystone.PushTaskRequest.DataEntry
	126, // 202: kubex.keystone.TaskResponse.data:type_name -> kubex.keystone.TaskResponse.DataEntry
	13,  // 203: kubex.keystone.DestroyRequest.authorization:type_name -> kubex.keystone.Authorization
	17,  // 204: kubex.keystone.DestroyRequest.schema:type_name -> kubex.keystone.Key
	18,  // 205: kubex.keystone.RepeatedValue.MixedEntry.value:type_name -> kubex.keystone.Value
	114, // 206: kubex.keystone.GroupCountResponse.Result.properties:type_name -> kubex.keystone.GroupCountResponse.Result.PropertiesEntry
	118, // 207: kubex.keystone.ChartTimeSeriesResponse.SeriesEntry.value:type_name -> kubex.keystone.ChartTimeSeriesResponse.ChartSeries
	127, // 208: kubex.keystone.ChartTimeSeriesResponse.ChartSeries.bucket:type_name -> google.protobuf.Timestamp
	119, // 209: kubex.keystone.ChartTimeSeriesResponse.ChartSeries.values:type_name -> kubex.keystone.ChartTimeSeriesResponse.ChartSeries.ValuesEntry
	18,  // 210: kubex.keystone.AKVGetResponse.PropertiesEntry.value:type_name -> kubex.keystone.Value
	41,  // 211: kubex.keystone.Keystone.Define:input_type -> kubex.keystone.SchemaRequest
	91,  // 212: kubex.keystone.Keystone.IID:input_type -> kubex.keystone.IIDCreateRequest
	92,  // 213: kubex.keystone.Keystone.IIDLookup:input_type -> kubex.keystone.IIDRequest
	20,  // 214: kubex.keystone.Keystone.PiiToken:input_type -> kubex.keystone.PiiTokenRequest
	22,  // 215: kubex.keystone.Keystone.PiiAnonymize:input_type -> kubex.keystone.PiiAnonymizeRequest
	42,  // 216: kubex.keystone.Keystone.Mutate:input_type -> kubex.keystone.MutateRequest
	100, // 217: kubex.keystone.Keystone.Destroy:input_type -> kubex.keystone.DestroyRequest
	36,  // 218: kubex.keystone.Keystone.Log:input_type -> kubex.keystone.LogRequest
	43,  // 219: kubex.keystone.Keystone.ReportTimeSeries:input_type -> kubex.keystone.ReportTimeSeriesRequest
	74,  // 220: kubex.keystone.Keystone.ChartTimeSeries:input_type -> kubex.keystone.ChartTimeSeriesRequest
	47,  // 221: kubex.keystone.Keystone.Retrieve:input_type -> kubex.keystone.EntityRequest
	59,  // 222: kubex.keystone.Keystone.Find:input_type -> kubex.keystone.FindRequest
	62,  // 223: kubex.keystone.Keystone.List:input_type -> kubex.keystone.ListRequest
	64,  // 224: kubex.keystone.Keystone.QueryIndex:input_type -> kubex.keystone.QueryIndexRequest
	83,  // 225: kubex.keystone.Keystone.Lookup:input_type -> kubex.keystone.LookupRequest
	66,  // 226: kubex.keystone.Keystone.GroupCount:input_type -> kubex.keystone.GroupCountRequest
	54,  // 227: kubex.keystone.Keystone.Logs:input_type -> kubex.keystone.LogsRequest
	56,  // 228: kubex.keystone.Keystone.Events:input_type -> kubex.keystone.EventRequest
	95,  // 229: kubex.keystone.Keystone.EventStream:input_type -> kubex.keystone.EventStreamRequest
	77,  // 230: kubex.keystone.Keystone.ShareView:input_type -> kubex.keystone.ShareViewRequest
	79,  // 231: kubex.keystone.Keystone.SharedViews:input_type -> kubex.keystone.SharedViewsRequest
	81,  // 232: kubex.keystone.Keystone.RateLimit:input_type -> kubex.keystone.RateLimitRequest
	72,  // 233: kubex.keystone.Keystone.DailyEntities:input_type -> kubex.keystone.DailyEntityRequest
	70,  // 234: kubex.keystone.Keystone.SchemaStatistics:input_type -> kubex.keystone.SchemaStatisticsRequest
	87,  // 235: kubex.keystone.Keystone.AKVGet:input_type -> kubex.keystone.AKVGetRequest
	86,  // 236: kubex.keystone.Keystone.AKVPut:input_type -> kubex.keystone.AKVPutRequest
	89,  // 237: kubex.keystone.Keystone.AKVDel:input_type -> kubex.keystone.AKVDelRequest
	97,  // 238: kubex.keystone.Keystone.PushTask:input_type -> kubex.keystone.PushTaskRequest
	98,  // 239: kubex.keystone.Keystone.TaskStream:input_type -> kubex.keystone.TaskAckRequest
	15,  // 240: kubex.keystone.Keystone.Define:output_type -> kubex.keystone.Schema
	94,  // 241: kubex.keystone.Keystone.IID:output_type -> kubex.keystone.IIDResponse
	93,  // 242: kubex.keystone.Keystone.IIDLookup:output_type -> kubex.keystone.IIDsResponse
	21,  // 243: kubex.keystone.Keystone.PiiToken:output_type -> kubex.keystone.PiiTokenResponse
	23,  // 244: kubex.keystone.Keystone.PiiAnonymize:output_type -> kubex.keystone.PiiAnonymizeResponse
	50,  // 245: kubex.keystone.Keystone.Mutate:output_type -> kubex.keystone.MutateResponse
	101, // 246: kubex.keystone.Keystone.Destroy:output_type -> kubex.keystone.DestroyResponse
	37,  // 247: kubex.keystone.Keystone.Log:output_type -> kubex.keystone.LogResponse
	50,  // 248: kubex.keystone.Keystone.ReportTimeSeries:output_type -> kubex.keystone.MutateResponse
	76,  // 249: kubex.keystone.Keystone.ChartTimeSeries:output_type -> kubex.keystone.ChartTimeSeriesResponse
	48,  // 250: kubex.keystone.Keystone.Retrieve:output_type -> kubex.keystone.EntityResponse
	60,  // 251: kubex.keystone.Keystone.Find:output_type -> kubex.keystone.FindResponse
	63,  // 252: kubex.keystone.Keystone.List:output_type -> kubex.keystone.ListResponse
	65,  // 253: kubex.keystone.Keystone.QueryIndex:output_type -> kubex.keystone.QueryIndexResponse
	84,  // 254: kubex.keystone.Keystone.Lookup:output_type -> kubex.keystone.LookupResponse
	67,  // 255: kubex.keystone.Keystone.GroupCount:output_type -> kubex.keystone.GroupCountResponse
	55,  // 256: kubex.keystone.Keystone.Logs:output_type -> kubex.keystone.LogsResponse
	57,  // 257: kubex.keystone.Keystone.Events:output_type -> kubex.keystone.EventsResponse
	96,  // 258: kubex.keystone.Keystone.EventStream:output_type -> kubex.keystone.EventStreamResponse
	78,  // 259: kubex.keystone.Keystone.ShareView:output_type -> kubex.keystone.SharedViewResponse
	80,  // 260: kubex.keystone.Keystone.SharedViews:output_type -> kubex.keystone.SharedViewsResponse
	82,  // 261: kubex.keystone.Keystone.RateLimit:output_type -> kubex.keystone.RateLimitResponse
	73,  // 262: kubex.keystone.Keystone.DailyEntities:output_type -> kubex.keystone.DailyEntityResponse
	71,  // 263: kubex.keystone.Keystone.SchemaStatistics:output_type -> kubex.keystone.SchemaStatisticsResponse
	88,  // 264: kubex.keystone.Keystone.AKVGet:output_type -> kubex.keystone.AKVGetResponse
	14,  // 265: kubex.keystone.Keystone.AKVPut:output_type -> kubex.keystone.GenericResponse
	14,  // 266: kubex.keystone.Keystone.AKVDel:output_type -> kubex.keystone.GenericResponse
	14,  // 267: kubex.keystone.Keystone.PushTask:output_type -> kubex.keystone.GenericResponse
	99,  // 268: kubex.keystone.Keystone.TaskStream:output_type -> kubex.keystone.TaskResponse
	240, // [240:269] is the sub-list for method output_type
	211, // [211:240] is the sub-list for method input_type
	211, // [211:211] is the sub-list for extension type_name
	211, // [211:211] is the sub-list for extension extendee
	0,   // [0:211] is the sub-list for field type_name
}

func init() { file_keystone_proto_init() }
func file_keystone_proto_init() {
	if File_keystone_proto != nil {
		return
	}
	file_keystone_proto_msgTypes[37].OneofWrappers = []any{}
	file_keystone_proto_msgTypes[72].OneofWrappers = []any{}
	file_keystone_proto_msgTypes[84].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keystone_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   116,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keystone_proto_goTypes,
		DependencyIndexes: file_keystone_proto_depIdxs,
		EnumInfos:         file_keystone_proto_enumTypes,
		MessageInfos:      file_keystone_proto_msgTypes,
	}.Build()
	File_keystone_proto = out.File
	file_keystone_proto_rawDesc = nil
	file_keystone_proto_goTypes = nil
	file_keystone_proto_depIdxs = nil
}
