// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: keystone.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Keystone_Define_FullMethodName           = "/kubex.keystone.Keystone/Define"
	Keystone_IID_FullMethodName              = "/kubex.keystone.Keystone/IID"
	Keystone_IIDLookup_FullMethodName        = "/kubex.keystone.Keystone/IIDLookup"
	Keystone_PiiToken_FullMethodName         = "/kubex.keystone.Keystone/PiiToken"
	Keystone_PiiAnonymize_FullMethodName     = "/kubex.keystone.Keystone/PiiAnonymize"
	Keystone_Mutate_FullMethodName           = "/kubex.keystone.Keystone/Mutate"
	Keystone_Destroy_FullMethodName          = "/kubex.keystone.Keystone/Destroy"
	Keystone_Log_FullMethodName              = "/kubex.keystone.Keystone/Log"
	Keystone_ReportTimeSeries_FullMethodName = "/kubex.keystone.Keystone/ReportTimeSeries"
	Keystone_ChartTimeSeries_FullMethodName  = "/kubex.keystone.Keystone/ChartTimeSeries"
	Keystone_Retrieve_FullMethodName         = "/kubex.keystone.Keystone/Retrieve"
	Keystone_Find_FullMethodName             = "/kubex.keystone.Keystone/Find"
	Keystone_List_FullMethodName             = "/kubex.keystone.Keystone/List"
	Keystone_QueryIndex_FullMethodName       = "/kubex.keystone.Keystone/QueryIndex"
	Keystone_Lookup_FullMethodName           = "/kubex.keystone.Keystone/Lookup"
	Keystone_GroupCount_FullMethodName       = "/kubex.keystone.Keystone/GroupCount"
	Keystone_Logs_FullMethodName             = "/kubex.keystone.Keystone/Logs"
	Keystone_Events_FullMethodName           = "/kubex.keystone.Keystone/Events"
	Keystone_EventStream_FullMethodName      = "/kubex.keystone.Keystone/EventStream"
	Keystone_ShareView_FullMethodName        = "/kubex.keystone.Keystone/ShareView"
	Keystone_SharedViews_FullMethodName      = "/kubex.keystone.Keystone/SharedViews"
	Keystone_RateLimit_FullMethodName        = "/kubex.keystone.Keystone/RateLimit"
	Keystone_DailyEntities_FullMethodName    = "/kubex.keystone.Keystone/DailyEntities"
	Keystone_SchemaStatistics_FullMethodName = "/kubex.keystone.Keystone/SchemaStatistics"
	Keystone_AKVGet_FullMethodName           = "/kubex.keystone.Keystone/AKVGet"
	Keystone_AKVPut_FullMethodName           = "/kubex.keystone.Keystone/AKVPut"
	Keystone_AKVDel_FullMethodName           = "/kubex.keystone.Keystone/AKVDel"
	Keystone_PushTask_FullMethodName         = "/kubex.keystone.Keystone/PushTask"
	Keystone_TaskStream_FullMethodName       = "/kubex.keystone.Keystone/TaskStream"
)

// KeystoneClient is the client API for Keystone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeystoneClient interface {
	// Define
	Define(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*Schema, error)
	// Incrementing ID
	IID(ctx context.Context, in *IIDCreateRequest, opts ...grpc.CallOption) (*IIDResponse, error)
	IIDLookup(ctx context.Context, in *IIDRequest, opts ...grpc.CallOption) (*IIDsResponse, error)
	// PII
	PiiToken(ctx context.Context, in *PiiTokenRequest, opts ...grpc.CallOption) (*PiiTokenResponse, error)
	PiiAnonymize(ctx context.Context, in *PiiAnonymizeRequest, opts ...grpc.CallOption) (*PiiAnonymizeResponse, error)
	// Store
	Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Reporting
	ReportTimeSeries(ctx context.Context, in *ReportTimeSeriesRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	ChartTimeSeries(ctx context.Context, in *ChartTimeSeriesRequest, opts ...grpc.CallOption) (*ChartTimeSeriesResponse, error)
	// Load
	Retrieve(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	// Deprecated: Do not use.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	QueryIndex(ctx context.Context, in *QueryIndexRequest, opts ...grpc.CallOption) (*QueryIndexResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	GroupCount(ctx context.Context, in *GroupCountRequest, opts ...grpc.CallOption) (*GroupCountResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error)
	// Shared Views
	ShareView(ctx context.Context, in *ShareViewRequest, opts ...grpc.CallOption) (*SharedViewResponse, error)
	SharedViews(ctx context.Context, in *SharedViewsRequest, opts ...grpc.CallOption) (*SharedViewsResponse, error)
	RateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error)
	// Management
	DailyEntities(ctx context.Context, in *DailyEntityRequest, opts ...grpc.CallOption) (*DailyEntityResponse, error)
	SchemaStatistics(ctx context.Context, in *SchemaStatisticsRequest, opts ...grpc.CallOption) (*SchemaStatisticsResponse, error)
	// App Key Value Store
	AKVGet(ctx context.Context, in *AKVGetRequest, opts ...grpc.CallOption) (*AKVGetResponse, error)
	AKVPut(ctx context.Context, in *AKVPutRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AKVDel(ctx context.Context, in *AKVDelRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	PushTask(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	TaskStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskAckRequest, TaskResponse], error)
}

type keystoneClient struct {
	cc grpc.ClientConnInterface
}

func NewKeystoneClient(cc grpc.ClientConnInterface) KeystoneClient {
	return &keystoneClient{cc}
}

func (c *keystoneClient) Define(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Schema)
	err := c.cc.Invoke(ctx, Keystone_Define_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) IID(ctx context.Context, in *IIDCreateRequest, opts ...grpc.CallOption) (*IIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IIDResponse)
	err := c.cc.Invoke(ctx, Keystone_IID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) IIDLookup(ctx context.Context, in *IIDRequest, opts ...grpc.CallOption) (*IIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IIDsResponse)
	err := c.cc.Invoke(ctx, Keystone_IIDLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) PiiToken(ctx context.Context, in *PiiTokenRequest, opts ...grpc.CallOption) (*PiiTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PiiTokenResponse)
	err := c.cc.Invoke(ctx, Keystone_PiiToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) PiiAnonymize(ctx context.Context, in *PiiAnonymizeRequest, opts ...grpc.CallOption) (*PiiAnonymizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PiiAnonymizeResponse)
	err := c.cc.Invoke(ctx, Keystone_PiiAnonymize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateResponse)
	err := c.cc.Invoke(ctx, Keystone_Mutate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, Keystone_Destroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, Keystone_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) ReportTimeSeries(ctx context.Context, in *ReportTimeSeriesRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateResponse)
	err := c.cc.Invoke(ctx, Keystone_ReportTimeSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) ChartTimeSeries(ctx context.Context, in *ChartTimeSeriesRequest, opts ...grpc.CallOption) (*ChartTimeSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChartTimeSeriesResponse)
	err := c.cc.Invoke(ctx, Keystone_ChartTimeSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Retrieve(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, Keystone_Retrieve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, Keystone_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *keystoneClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Keystone_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) QueryIndex(ctx context.Context, in *QueryIndexRequest, opts ...grpc.CallOption) (*QueryIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryIndexResponse)
	err := c.cc.Invoke(ctx, Keystone_QueryIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, Keystone_Lookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) GroupCount(ctx context.Context, in *GroupCountRequest, opts ...grpc.CallOption) (*GroupCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupCountResponse)
	err := c.cc.Invoke(ctx, Keystone_GroupCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, Keystone_Logs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, Keystone_Events_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Keystone_ServiceDesc.Streams[0], Keystone_EventStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, EventStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Keystone_EventStreamClient = grpc.ServerStreamingClient[EventStreamResponse]

func (c *keystoneClient) ShareView(ctx context.Context, in *ShareViewRequest, opts ...grpc.CallOption) (*SharedViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedViewResponse)
	err := c.cc.Invoke(ctx, Keystone_ShareView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) SharedViews(ctx context.Context, in *SharedViewsRequest, opts ...grpc.CallOption) (*SharedViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedViewsResponse)
	err := c.cc.Invoke(ctx, Keystone_SharedViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) RateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLimitResponse)
	err := c.cc.Invoke(ctx, Keystone_RateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) DailyEntities(ctx context.Context, in *DailyEntityRequest, opts ...grpc.CallOption) (*DailyEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyEntityResponse)
	err := c.cc.Invoke(ctx, Keystone_DailyEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) SchemaStatistics(ctx context.Context, in *SchemaStatisticsRequest, opts ...grpc.CallOption) (*SchemaStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemaStatisticsResponse)
	err := c.cc.Invoke(ctx, Keystone_SchemaStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) AKVGet(ctx context.Context, in *AKVGetRequest, opts ...grpc.CallOption) (*AKVGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AKVGetResponse)
	err := c.cc.Invoke(ctx, Keystone_AKVGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) AKVPut(ctx context.Context, in *AKVPutRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Keystone_AKVPut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) AKVDel(ctx context.Context, in *AKVDelRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Keystone_AKVDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) PushTask(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Keystone_PushTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) TaskStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskAckRequest, TaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Keystone_ServiceDesc.Streams[1], Keystone_TaskStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskAckRequest, TaskResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Keystone_TaskStreamClient = grpc.BidiStreamingClient[TaskAckRequest, TaskResponse]

// KeystoneServer is the server API for Keystone service.
// All implementations must embed UnimplementedKeystoneServer
// for forward compatibility.
type KeystoneServer interface {
	// Define
	Define(context.Context, *SchemaRequest) (*Schema, error)
	// Incrementing ID
	IID(context.Context, *IIDCreateRequest) (*IIDResponse, error)
	IIDLookup(context.Context, *IIDRequest) (*IIDsResponse, error)
	// PII
	PiiToken(context.Context, *PiiTokenRequest) (*PiiTokenResponse, error)
	PiiAnonymize(context.Context, *PiiAnonymizeRequest) (*PiiAnonymizeResponse, error)
	// Store
	Mutate(context.Context, *MutateRequest) (*MutateResponse, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// Reporting
	ReportTimeSeries(context.Context, *ReportTimeSeriesRequest) (*MutateResponse, error)
	ChartTimeSeries(context.Context, *ChartTimeSeriesRequest) (*ChartTimeSeriesResponse, error)
	// Load
	Retrieve(context.Context, *EntityRequest) (*EntityResponse, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	// Deprecated: Do not use.
	List(context.Context, *ListRequest) (*ListResponse, error)
	QueryIndex(context.Context, *QueryIndexRequest) (*QueryIndexResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	GroupCount(context.Context, *GroupCountRequest) (*GroupCountResponse, error)
	Logs(context.Context, *LogsRequest) (*LogsResponse, error)
	Events(context.Context, *EventRequest) (*EventsResponse, error)
	EventStream(*EventStreamRequest, grpc.ServerStreamingServer[EventStreamResponse]) error
	// Shared Views
	ShareView(context.Context, *ShareViewRequest) (*SharedViewResponse, error)
	SharedViews(context.Context, *SharedViewsRequest) (*SharedViewsResponse, error)
	RateLimit(context.Context, *RateLimitRequest) (*RateLimitResponse, error)
	// Management
	DailyEntities(context.Context, *DailyEntityRequest) (*DailyEntityResponse, error)
	SchemaStatistics(context.Context, *SchemaStatisticsRequest) (*SchemaStatisticsResponse, error)
	// App Key Value Store
	AKVGet(context.Context, *AKVGetRequest) (*AKVGetResponse, error)
	AKVPut(context.Context, *AKVPutRequest) (*GenericResponse, error)
	AKVDel(context.Context, *AKVDelRequest) (*GenericResponse, error)
	PushTask(context.Context, *PushTaskRequest) (*GenericResponse, error)
	TaskStream(grpc.BidiStreamingServer[TaskAckRequest, TaskResponse]) error
	mustEmbedUnimplementedKeystoneServer()
}

// UnimplementedKeystoneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeystoneServer struct{}

func (UnimplementedKeystoneServer) Define(context.Context, *SchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Define not implemented")
}
func (UnimplementedKeystoneServer) IID(context.Context, *IIDCreateRequest) (*IIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IID not implemented")
}
func (UnimplementedKeystoneServer) IIDLookup(context.Context, *IIDRequest) (*IIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IIDLookup not implemented")
}
func (UnimplementedKeystoneServer) PiiToken(context.Context, *PiiTokenRequest) (*PiiTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PiiToken not implemented")
}
func (UnimplementedKeystoneServer) PiiAnonymize(context.Context, *PiiAnonymizeRequest) (*PiiAnonymizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PiiAnonymize not implemented")
}
func (UnimplementedKeystoneServer) Mutate(context.Context, *MutateRequest) (*MutateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (UnimplementedKeystoneServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedKeystoneServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedKeystoneServer) ReportTimeSeries(context.Context, *ReportTimeSeriesRequest) (*MutateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTimeSeries not implemented")
}
func (UnimplementedKeystoneServer) ChartTimeSeries(context.Context, *ChartTimeSeriesRequest) (*ChartTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChartTimeSeries not implemented")
}
func (UnimplementedKeystoneServer) Retrieve(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedKeystoneServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedKeystoneServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKeystoneServer) QueryIndex(context.Context, *QueryIndexRequest) (*QueryIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndex not implemented")
}
func (UnimplementedKeystoneServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedKeystoneServer) GroupCount(context.Context, *GroupCountRequest) (*GroupCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCount not implemented")
}
func (UnimplementedKeystoneServer) Logs(context.Context, *LogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedKeystoneServer) Events(context.Context, *EventRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedKeystoneServer) EventStream(*EventStreamRequest, grpc.ServerStreamingServer[EventStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedKeystoneServer) ShareView(context.Context, *ShareViewRequest) (*SharedViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareView not implemented")
}
func (UnimplementedKeystoneServer) SharedViews(context.Context, *SharedViewsRequest) (*SharedViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedViews not implemented")
}
func (UnimplementedKeystoneServer) RateLimit(context.Context, *RateLimitRequest) (*RateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimit not implemented")
}
func (UnimplementedKeystoneServer) DailyEntities(context.Context, *DailyEntityRequest) (*DailyEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyEntities not implemented")
}
func (UnimplementedKeystoneServer) SchemaStatistics(context.Context, *SchemaStatisticsRequest) (*SchemaStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaStatistics not implemented")
}
func (UnimplementedKeystoneServer) AKVGet(context.Context, *AKVGetRequest) (*AKVGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AKVGet not implemented")
}
func (UnimplementedKeystoneServer) AKVPut(context.Context, *AKVPutRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AKVPut not implemented")
}
func (UnimplementedKeystoneServer) AKVDel(context.Context, *AKVDelRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AKVDel not implemented")
}
func (UnimplementedKeystoneServer) PushTask(context.Context, *PushTaskRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTask not implemented")
}
func (UnimplementedKeystoneServer) TaskStream(grpc.BidiStreamingServer[TaskAckRequest, TaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TaskStream not implemented")
}
func (UnimplementedKeystoneServer) mustEmbedUnimplementedKeystoneServer() {}
func (UnimplementedKeystoneServer) testEmbeddedByValue()                  {}

// UnsafeKeystoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeystoneServer will
// result in compilation errors.
type UnsafeKeystoneServer interface {
	mustEmbedUnimplementedKeystoneServer()
}

func RegisterKeystoneServer(s grpc.ServiceRegistrar, srv KeystoneServer) {
	// If the following call pancis, it indicates UnimplementedKeystoneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Keystone_ServiceDesc, srv)
}

func _Keystone_Define_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Define(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Define_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Define(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_IID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IIDCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).IID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_IID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).IID(ctx, req.(*IIDCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_IIDLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).IIDLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_IIDLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).IIDLookup(ctx, req.(*IIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_PiiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiiTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).PiiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_PiiToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).PiiToken(ctx, req.(*PiiTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_PiiAnonymize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiiAnonymizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).PiiAnonymize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_PiiAnonymize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).PiiAnonymize(ctx, req.(*PiiAnonymizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Mutate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Mutate(ctx, req.(*MutateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_ReportTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).ReportTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_ReportTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).ReportTimeSeries(ctx, req.(*ReportTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_ChartTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).ChartTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_ChartTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).ChartTimeSeries(ctx, req.(*ChartTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Retrieve(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_QueryIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).QueryIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_QueryIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).QueryIndex(ctx, req.(*QueryIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_GroupCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).GroupCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_GroupCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).GroupCount(ctx, req.(*GroupCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Logs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_Events_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Events(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeystoneServer).EventStream(m, &grpc.GenericServerStream[EventStreamRequest, EventStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Keystone_EventStreamServer = grpc.ServerStreamingServer[EventStreamResponse]

func _Keystone_ShareView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).ShareView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_ShareView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).ShareView(ctx, req.(*ShareViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_SharedViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).SharedViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_SharedViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).SharedViews(ctx, req.(*SharedViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_RateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).RateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_RateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).RateLimit(ctx, req.(*RateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_DailyEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).DailyEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_DailyEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).DailyEntities(ctx, req.(*DailyEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_SchemaStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).SchemaStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_SchemaStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).SchemaStatistics(ctx, req.(*SchemaStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_AKVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AKVGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).AKVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_AKVGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).AKVGet(ctx, req.(*AKVGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_AKVPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AKVPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).AKVPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_AKVPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).AKVPut(ctx, req.(*AKVPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_AKVDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AKVDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).AKVDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_AKVDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).AKVDel(ctx, req.(*AKVDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_PushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).PushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keystone_PushTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).PushTask(ctx, req.(*PushTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_TaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeystoneServer).TaskStream(&grpc.GenericServerStream[TaskAckRequest, TaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Keystone_TaskStreamServer = grpc.BidiStreamingServer[TaskAckRequest, TaskResponse]

// Keystone_ServiceDesc is the grpc.ServiceDesc for Keystone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keystone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubex.keystone.Keystone",
	HandlerType: (*KeystoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Define",
			Handler:    _Keystone_Define_Handler,
		},
		{
			MethodName: "IID",
			Handler:    _Keystone_IID_Handler,
		},
		{
			MethodName: "IIDLookup",
			Handler:    _Keystone_IIDLookup_Handler,
		},
		{
			MethodName: "PiiToken",
			Handler:    _Keystone_PiiToken_Handler,
		},
		{
			MethodName: "PiiAnonymize",
			Handler:    _Keystone_PiiAnonymize_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _Keystone_Mutate_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Keystone_Destroy_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Keystone_Log_Handler,
		},
		{
			MethodName: "ReportTimeSeries",
			Handler:    _Keystone_ReportTimeSeries_Handler,
		},
		{
			MethodName: "ChartTimeSeries",
			Handler:    _Keystone_ChartTimeSeries_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Keystone_Retrieve_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Keystone_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Keystone_List_Handler,
		},
		{
			MethodName: "QueryIndex",
			Handler:    _Keystone_QueryIndex_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Keystone_Lookup_Handler,
		},
		{
			MethodName: "GroupCount",
			Handler:    _Keystone_GroupCount_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Keystone_Logs_Handler,
		},
		{
			MethodName: "Events",
			Handler:    _Keystone_Events_Handler,
		},
		{
			MethodName: "ShareView",
			Handler:    _Keystone_ShareView_Handler,
		},
		{
			MethodName: "SharedViews",
			Handler:    _Keystone_SharedViews_Handler,
		},
		{
			MethodName: "RateLimit",
			Handler:    _Keystone_RateLimit_Handler,
		},
		{
			MethodName: "DailyEntities",
			Handler:    _Keystone_DailyEntities_Handler,
		},
		{
			MethodName: "SchemaStatistics",
			Handler:    _Keystone_SchemaStatistics_Handler,
		},
		{
			MethodName: "AKVGet",
			Handler:    _Keystone_AKVGet_Handler,
		},
		{
			MethodName: "AKVPut",
			Handler:    _Keystone_AKVPut_Handler,
		},
		{
			MethodName: "AKVDel",
			Handler:    _Keystone_AKVDel_Handler,
		},
		{
			MethodName: "PushTask",
			Handler:    _Keystone_PushTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Keystone_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskStream",
			Handler:       _Keystone_TaskStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "keystone.proto",
}
